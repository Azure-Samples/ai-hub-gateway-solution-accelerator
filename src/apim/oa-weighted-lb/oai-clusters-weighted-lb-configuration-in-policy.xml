<fragment>
    <!-- Getting OpenAI clusters configuration -->
    <cache-lookup-value key="@("oaClusters" + context.Deployment.Region + context.Api.Revision)" variable-name="oaClusters" />
    <!-- If we can't find the configuration, it will be loaded -->
    <choose>
        <when condition="@(context.Variables.ContainsKey("oaClusters") == false)">
            <set-variable name="oaClusters"
                value="@{
                    JArray routes = new JArray();
                    JArray clusters = new JArray();
                    if(context.Deployment.Region == "West Europe" || true)
                    {
                        routes.Add(new JObject()
                        {
                            { "name", "REPLACE1" },
                            { "location", "swedencentral" },
                            { "url", "https://REPLACE1.openai.azure.com" },
                            { "priority", 1},
                            { "isThrottling", false }, 
                            { "weight", "300"},
                            { "retryAfter", DateTime.MinValue } 
                        });

                        routes.Add(new JObject()
                        {
                            { "name", "REPLACE2" },
                            { "location", "westeurope" },
                            { "url", "https://REPLACE2.openai.azure.com" },
                            { "priority", 1},
                            { "isThrottling", false },
                            { "weight", "100"},
                            { "retryAfter", DateTime.MinValue }
                        });

                        routes.Add(new JObject()
                        {
                            { "name", "REPLACE3" },
                            { "location", "westus" },
                            { "url", "https://REPLACE3.openai.azure.com" },
                            { "priority", 1},
                            { "isThrottling", false },
                            { "weight", "50"},
                            { "retryAfter", DateTime.MinValue }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "gpt-35-turbo" },
                            { "routes", new JArray(routes[0], routes[1]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "embedding" },
                            { "routes", new JArray(routes[0], routes[1]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "gpt-4" },
                            { "routes", new JArray(routes[0]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "dall-e-3" },
                            { "routes", new JArray(routes[0]) }
                        });
                    }
                    else
                    {
                        //Error has no clusters for the region
                    }
                    
                    return clusters;   
                }" />
            <!-- Add cluster configurations to cache -->
            <cache-store-value key="@("oaClusters" + context.Deployment.Region + context.Api.Revision)" value="@((JArray)context.Variables["oaClusters"])" duration="86400" />
        </when>
    </choose>
    <!-- Getting OpenAI routes configuration based on deployment name, region and api revision -->
    <cache-lookup-value key="@(context.Request.MatchedParameters["deployment-id"] + "Routes" + context.Deployment.Region + context.Api.Revision)" variable-name="routes" />
    <!-- If we can't find the configuration, it will be loaded -->
    <choose>
        <when condition="@(context.Variables.ContainsKey("routes") == false)">
            <set-variable name="routes"
                value="@{
                    string deploymentName = context.Request.MatchedParameters["deployment-id"];
                    JArray clusters = (JArray)context.Variables["oaClusters"];
                    JObject cluster = (JObject)clusters.FirstOrDefault(o => o["deploymentName"]?.Value<string>() == deploymentName);
                    if(cluster == null)
                    {
                        //Error has no cluster matched the deployment name
                    }
                    JArray routes = (JArray)cluster["routes"];
                    return routes;
                }" />
            <!-- Set total weights for selected routes based on model -->
            <set-variable name="totalWeight" value="@{
                int totalWeight = 0;
                JArray routes = (JArray)context.Variables["routes"];
                foreach (JObject route in routes)
                {
                    totalWeight += int.Parse(route["weight"].ToString());
                }
                return totalWeight;
                }" />
            <!-- Set cumulative weights for selected routes based on model-->
            <set-variable name="cumulativeWeights" value="@{
                JArray cumulativeWeights = new JArray();
                int totalWeight = 0;
                JArray routes = (JArray)context.Variables["routes"];
                foreach (JObject route in routes)
                {
                    totalWeight += int.Parse(route["weight"].ToString());
                    cumulativeWeights.Add(totalWeight);
                }
                return cumulativeWeights;
            }" />
            <!-- Add cluster configurations to cache -->
            <cache-store-value key="@(context.Request.MatchedParameters["deployment-id"] + "Routes" + context.Deployment.Region + context.Api.Revision)" value="@((JArray)context.Variables["routes"])" duration="86400" />
        </when>
    </choose>
    <set-variable name="routeIndex" value="-1" />
    <set-variable name="remainingRoutes" value="1" />
</fragment>