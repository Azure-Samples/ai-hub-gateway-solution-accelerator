openapi: 3.0.1
info:
  title: Azure OpenAI API
  description: 'Azure OpenAI APIs for completions, images, transcription and search'
  version: '1.0'
servers:
  - url: https://apim-prod-mcaps-gateway.az.mobivisions.com/ai-hub-gw-2
paths:
  '/deployments/{deployment-id}/completions':
    post:
      summary: 'Creates a completion for the provided prompt, parameters and chosen model.'
      description: 'Creates a completion for the provided prompt, parameters and chosen model.'
      operationId: Completions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the model which was deployed.
            example: davinci
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: '2024-02-01T00:00:00Z'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  oneOf:
                    - type: string
                      default: ''
                      nullable: true
                      example: This is a test.
                    - type: array
                      items:
                        type: string
                        default: ''
                        example: This is a test.
                      description: Array size minimum of 1 and maximum of 2048
                  description: "The prompt(s) to generate completions for, encoded as a string or array of strings.\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048."
                max_tokens:
                  type: integer
                  description: 'The token count of your prompt plus max_tokens cannot exceed the model''s context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0.'
                  default: 16
                  nullable: true
                  example: 16
                temperature:
                  type: number
                  description: "What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.\nWe generally recommend altering this or top_p but not both."
                  default: 1
                  nullable: true
                  example: 1
                top_p:
                  type: number
                  description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or temperature but not both."
                  default: 1
                  nullable: true
                  example: 1
                logit_bias:
                  type: object
                  description: 'Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {"50256" &#58; -100} to prevent the <|endoftext|> token from being generated.'
                user:
                  type: string
                  description: 'A unique identifier representing your end-user, which can help monitoring and detecting abuse'
                n:
                  type: integer
                  description: "How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop."
                  default: 1
                  nullable: true
                  example: 1
                stream:
                  type: boolean
                  description: 'Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.'
                  default: false
                  nullable: true
                logprobs:
                  type: integer
                  description: "Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.\nMinimum of 0 and maximum of 5 allowed."
                  default: 
                  nullable: true
                suffix:
                  type: string
                  description: The suffix that comes after a completion of inserted text.
                  nullable: true
                echo:
                  type: boolean
                  description: Echo back the prompt in addition to the completion
                  default: false
                  nullable: true
                stop:
                  oneOf:
                    - type: string
                      default: <|endoftext|>
                      nullable: true
                      example: ''
                    - type: array
                      items:
                        type: string
                        example: ''
                      description: Array minimum size of 1 and maximum of 4
                  description: Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
                completion_config:
                  type: string
                  nullable: true
                presence_penalty:
                  type: number
                  description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model''s likelihood to talk about new topics.'
                  default: 0
                frequency_penalty:
                  type: number
                  description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model''s likelihood to repeat the same line verbatim.'
                  default: 0
                best_of:
                  type: integer
                  description: "Generates best_of completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\nWhen used with n, best_of controls the number of candidate completions and n specifies how many to return - best_of must be greater than n.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128."
            example:
              prompt: "Negate the following sentence.The price for bubblegum increased on thursday.\n Negated Sentence:"
              max_tokens: 50
      responses:
        '200':
          description: OK
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - id
                  - object
                  - created
                  - model
                  - choices
                type: object
                properties:
                  id:
                    type: string
                  object:
                    type: string
                  created:
                    type: integer
                  model:
                    type: string
                  prompt_filter_results:
                    $ref: '#/components/schemas/promptFilterResults'
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                        index:
                          type: integer
                        logprobs:
                          type: object
                          properties:
                            tokens:
                              type: array
                              items:
                                type: string
                            token_logprobs:
                              type: array
                              items:
                                type: number
                            top_logprobs:
                              type: array
                              items:
                                type: object
                                additionalProperties:
                                  type: number
                            text_offset:
                              type: array
                              items:
                                type: integer
                          nullable: true
                        finish_reason:
                          type: string
                        content_filter_results:
                          $ref: '#/components/schemas/contentFilterChoiceResults'
                  usage:
                    required:
                      - prompt_tokens
                      - total_tokens
                      - completion_tokens
                    type: object
                    properties:
                      completion_tokens:
                        type: number
                        format: int32
                      prompt_tokens:
                        type: number
                        format: int32
                      total_tokens:
                        type: number
                        format: int32
              example:
                model: davinci
                object: text_completion
                id: cmpl-4509KAos68kxOqpE2uYGw81j6m7uo
                created: 1637097562
                choices:
                  - index: 0
                    text: The price for bubblegum decreased on thursday.
                    logprobs: 
                    finish_reason: stop
        '400':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                  code: string
                  message: string
        '500':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                  code: string
                  message: string
  '/deployments/{deployment-id}/embeddings':
    post:
      summary: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      operationId: embeddings_create
      parameters:
        - name: deployment-id
          in: path
          description: The deployment id of the model which was deployed.
          required: true
          schema:
            enum:
              - embedding
            type: string
            example: ada-search-index-v1
        - name: api-version
          in: query
          description: Azure OpenAI API version
          required: true
          schema:
            enum:
              - '2024-02-01'
            type: string
            description: api version
            example: '2024-02-01'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - input
              type: object
              properties:
                input:
                  oneOf:
                    - type: string
                      default: ''
                      nullable: true
                      example: This is a test.
                    - maxItems: 2048
                      minItems: 1
                      type: array
                      items:
                        minLength: 1
                        type: string
                        example: This is a test.
                  description: "Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.\nUnless you are embedding code, we suggest replacing newlines (\\n) in your input with a single space, as we have observed inferior results when newlines are present."
                user:
                  type: string
                  description: 'A unique identifier representing your end-user, which can help monitoring and detecting abuse.'
                input_type:
                  type: string
                  description: input type of embedding search to use
                  example: query
            example:
              input: I love Azure API Management
              user: APIM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - object
                  - model
                  - data
                  - usage
                type: object
                properties:
                  object:
                    type: string
                  model:
                    type: string
                  data:
                    type: array
                    items:
                      required:
                        - index
                        - object
                        - embedding
                      type: object
                      properties:
                        index:
                          type: integer
                        object:
                          type: string
                        embedding:
                          type: array
                          items:
                            type: number
                  usage:
                    required:
                      - prompt_tokens
                      - total_tokens
                    type: object
                    properties:
                      prompt_tokens:
                        type: integer
                      total_tokens:
                        type: integer
              example:
                object: string
                model: string
                data:
                  - index: 0
                    object: string
                    embedding:
                      - 0
                usage:
                  prompt_tokens: 0
                  total_tokens: 0
  '/deployments/{deployment-id}/chat/completions':
    post:
      summary: Creates a completion for the chat message
      description: Creates a completion for the chat message
      operationId: ChatCompletions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            enum:
              - gpt-35-turbo
            type: string
            description: Deployment id of the model which was deployed.
            default: gpt-35-turbo
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - '2024-02-01'
            type: string
            description: api version
            default: '2024-02-01'
            example: '2024-02-01'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChatCompletionRequest'
            example:
              model: gpt-35-turbo
              messages:
                - role: user
                  content: Hello! my name is Zaki Ramadan and my phone is 05612345678 and I'm asking about distance between the moon and earth
      responses:
        '200':
          description: OK
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createChatCompletionResponse'
              example:
                id: string
                object: chat.completion
                created: 0
                model: string
                usage:
                  prompt_tokens: 0
                  completion_tokens: 0
                  total_tokens: 0
                system_fingerprint: string
                prompt_filter_results:
                  - prompt_index: 0
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                choices:
                  - index: 0
                    finish_reason: string
                    message:
                      role: assistant
                      content: string
                      tool_calls:
                        - id: string
                          type: function
                          function:
                            name: string
                            arguments: string
                      function_call:
                        name: string
                        arguments: string
                      context:
                        citations:
                          - content: string
                            title: string
                            url: string
                            filepath: string
                            chunk_id: string
                        intent: string
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      protected_material_text:
                        filtered: true
                        detected: true
                      protected_material_code:
                        filtered: true
                        detected: true
                        citation:
                          URL: string
                          license: string
        '400':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                  code: string
                  message: string
        '500':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                  code: string
                  message: string
  '/deployments/{deployment-id}/audio/transcriptions':
    post:
      summary: Transcribes audio into the input language.
      description: Transcribes audio into the input language.
      operationId: Transcriptions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the whisper model.
            example: whisper
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: '2024-02-01'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                prompt:
                  type: string
                response_format:
                  enum:
                    - json
                    - text
                    - srt
                    - verbose_json
                    - vtt
                  type: string
                temperature:
                  type: number
                  default: 0
                language:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
              example:
                text: string
            text/plain:
              schema:
                type: string
                description: 'Transcribed text in the output format (when response_format was one of text, vtt or srt).'
              examples:
                default:
                  value: 
  '/deployments/{deployment-id}/audio/translations':
    post:
      summary: Transcribes and translates input audio into English text.
      description: Transcribes and translates input audio into English text.
      operationId: Translations_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the whisper model which was deployed.
            example: whisper
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: '2024-02-01'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                prompt:
                  type: string
                response_format:
                  enum:
                    - json
                    - text
                    - srt
                    - verbose_json
                    - vtt
                  type: string
                temperature:
                  type: number
                  default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
              example:
                text: string
            text/plain:
              schema:
                type: string
                description: 'Transcribed text in the output format (when response_format was one of text, vtt or srt).'
              examples:
                default:
                  value: 
  '/deployments/{deployment-id}/images/generations':
    post:
      summary: Generates a batch of images from a text caption on a given DALLE model deployment
      description: Generates a batch of images from a text caption on a given DALLE model deployment
      operationId: ImageGenerations_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the dalle model which was deployed.
            example: dalle-deployment
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: '2024-02-01'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageGenerationsRequest'
            example:
              prompt: a corgi in a field
              n: 1
              size: 1024x1024
              response_format: url
              user: user123456
              quality: standard
              style: vivid
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateImagesResponse'
              example:
                created: '1676540381'
                data:
                  - url: https://www.contoso.com
                    b64_json: string
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                    revised_prompt: string
                    prompt_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
        '400':
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dalleErrorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
                    revised_prompt: string
                  code: string
                  message: string
        '500':
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dalleErrorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
                    revised_prompt: string
                  code: string
                  message: string
components:
  schemas:
    errorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/error'
    errorBase:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    error:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/innerError'
    innerError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
      description: Inner error with additional details.
    innerErrorCode:
      enum:
        - ResponsibleAIPolicyViolation
      type: string
      description: Error codes for the inner error object.
      x-ms-enum:
        name: InnerErrorCode
        modelAsString: true
        values:
          - value: ResponsibleAIPolicyViolation
            description: The prompt violated one of more content filter rules.
    dalleErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/dalleError'
    dalleError:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/dalleInnerError'
    dalleInnerError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
        revised_prompt:
          type: string
          description: 'The prompt that was used to generate the image, if there was any revision to the prompt.'
      description: Inner error with additional details.
    contentFilterResultBase:
      required:
        - filtered
      type: object
      properties:
        filtered:
          type: boolean
    contentFilterSeverityResult:
      required:
        - severity
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            severity:
              enum:
                - safe
                - low
                - medium
                - high
              type: string
              x-ms-enum:
                name: ContentFilterSeverity
                modelAsString: true
                values:
                  - value: safe
                    description: General content or related content in generic or non-harmful contexts.
                  - value: low
                    description: Harmful content at a low intensity and risk level.
                  - value: medium
                    description: Harmful content at a medium intensity and risk level.
                  - value: high
                    description: Harmful content at a high intensity and risk level.
    contentFilterDetectedResult:
      required:
        - detected
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            detected:
              type: boolean
    contentFilterDetectedWithCitationResult:
      required:
        - detected
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            citation:
              type: object
              properties:
                URL:
                  type: string
                license:
                  type: string
    contentFilterResultsBase:
      type: object
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        profanity:
          $ref: '#/components/schemas/contentFilterDetectedResult'
        error:
          $ref: '#/components/schemas/errorBase'
      description: Information about the content filtering results.
    contentFilterPromptResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    contentFilterChoiceResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            protected_material_text:
              $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            protected_material_code:
              $ref: '#/components/schemas/contentFilterDetectedWithCitationResult'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    promptFilterResult:
      type: object
      properties:
        prompt_index:
          type: integer
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
      description: Content filtering results for a single prompt in the request.
    promptFilterResults:
      type: array
      items:
        $ref: '#/components/schemas/promptFilterResult'
      description: 'Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.'
    dalleContentFilterResults:
      type: object
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
      description: Information about the content filtering results.
    dalleFilterResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/dalleContentFilterResults'
        - properties:
            profanity:
              $ref: '#/components/schemas/contentFilterDetectedResult'
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    chatCompletionsRequestCommon:
      type: object
      properties:
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both."
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both."
          default: 1
          nullable: true
          example: 1
        stream:
          type: boolean
          description: 'If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.'
          default: false
          nullable: true
        stop:
          oneOf:
            - type: string
              nullable: true
            - maxItems: 4
              minItems: 1
              type: array
              items:
                type: string
              description: Array minimum size of 1 and maximum of 4
          description: Up to 4 sequences where the API will stop generating further tokens.
          default: 
        max_tokens:
          type: integer
          description: 'The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).'
          default: 4096
        presence_penalty:
          maximum: 2.0
          minimum: -2.0
          type: number
          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model''s likelihood to talk about new topics.'
          default: 0
        frequency_penalty:
          maximum: 2.0
          minimum: -2.0
          type: number
          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model''s likelihood to repeat the same line verbatim.'
          default: 0
        logit_bias:
          type: object
          description: 'Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.'
          nullable: true
        user:
          type: string
          description: 'A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.'
          example: user-1234
    createChatCompletionRequest:
      required:
        - messages
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsRequestCommon'
        - properties:
            messages:
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionRequestMessage'
              description: 'A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).'
            data_sources:
              type: array
              items:
                $ref: '#/components/schemas/azureChatExtensionConfiguration'
              description: "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI."
            n:
              maximum: 128.0
              minimum: 1.0
              type: integer
              description: How many chat completion choices to generate for each input message.
              default: 1
              nullable: true
              example: 1
            seed:
              maximum: 9223372036854775800
              minimum: -9223372036854775800
              type: integer
              description: 'If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.'
              default: 0
              nullable: true
              example: 1
            response_format:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/chatCompletionResponseFormat'
              description: An object specifying the format that the model must output. Used to enable JSON mode.
            tools:
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionTool'
              description: 'A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.'
            tool_choice:
              $ref: '#/components/schemas/chatCompletionToolChoiceOption'
            functions:
              maxItems: 128
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionFunction'
              description: Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.
            function_call:
              oneOf:
                - enum:
                    - none
                    - auto
                  type: string
                  description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
                - required:
                    - name
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the function to call.
                  description: 'Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.'
              description: 'Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.'
    chatCompletionResponseFormat:
      enum:
        - text
        - json_object
      type: string
      description: Setting to `json_object` enables JSON mode. This guarantees that the message the model generates is valid JSON.
      default: text
      nullable: true
      example: json_object
      x-ms-enum:
        name: ChatCompletionResponseFormat
        modelAsString: true
        values:
          - value: text
            description: Response format is a plain text string.
          - value: json_object
            description: Response format is a JSON object.
    chatCompletionFunction:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
        description:
          type: string
          description: The description of what the function does.
        parameters:
          $ref: '#/components/schemas/chatCompletionFunctionParameters'
    chatCompletionFunctionParameters:
      type: object
      description: 'The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.'
    chatCompletionRequestMessage:
      required:
        - role
      type: object
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionRequestMessageRole'
      discriminator:
        propertyName: role
        mapping:
          system: '#/components/schemas/chatCompletionRequestMessageSystem'
          user: '#/components/schemas/chatCompletionRequestMessageUser'
          assistant: '#/components/schemas/chatCompletionRequestMessageAssistant'
          tool: '#/components/schemas/chatCompletionRequestMessageTool'
          function: '#/components/schemas/chatCompletionRequestMessageFunction'
    chatCompletionRequestMessageRole:
      enum:
        - system
        - user
        - assistant
        - tool
        - function
      type: string
      description: The role of the messages author.
      x-ms-enum:
        name: ChatCompletionRequestMessageRole
        modelAsString: true
        values:
          - value: system
            description: The message author role is system.
          - value: user
            description: The message author role is user.
          - value: assistant
            description: The message author role is assistant.
          - value: tool
            description: The message author role is tool.
          - value: function
            description: Deprecated. The message author role is function.
    chatCompletionRequestMessageSystem:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
    chatCompletionRequestMessageUser:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              oneOf:
                - type: string
                  description: The contents of the message.
                - minimum: 1.0
                  type: array
                  items:
                    $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
                  description: 'An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.'
              nullable: true
    chatCompletionRequestMessageContentPart:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionRequestMessageContentPartType'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/chatCompletionRequestMessageContentPartText'
          image_url: '#/components/schemas/chatCompletionRequestMessageContentPartImage'
    chatCompletionRequestMessageContentPartType:
      enum:
        - text
        - image_url
      type: string
      description: The type of the content part.
      x-ms-enum:
        name: ChatCompletionRequestMessageContentPartType
        modelAsString: true
        values:
          - value: text
            description: The content part type is text.
          - value: image_url
            description: The content part type is image_url.
    chatCompletionRequestMessageContentPartText:
      required:
        - text
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            text:
              type: string
              description: The text content.
    chatCompletionRequestMessageContentPartImage:
      required:
        - url
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              $ref: '#/components/schemas/imageDetailLevel'
    imageDetailLevel:
      enum:
        - auto
        - low
        - high
      type: string
      description: Specifies the detail level of the image.
      default: auto
      x-ms-enum:
        name: ImageDetailLevel
        modelAsString: true
        values:
          - value: auto
            description: The image detail level is auto.
          - value: low
            description: The image detail level is low.
          - value: high
            description: The image detail level is high.
    chatCompletionRequestMessageAssistant:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
            tool_calls:
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionMessageToolCall'
              description: 'The tool calls generated by the model, such as function calls.'
            context:
              $ref: '#/components/schemas/azureChatExtensionsMessageContext'
    azureChatExtensionConfiguration:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/azureChatExtensionType'
      description: "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI."
      discriminator:
        propertyName: type
        mapping:
          azure_search: '#/components/schemas/azureSearchChatExtensionConfiguration'
          azure_cosmos_db: '#/components/schemas/azureCosmosDBChatExtensionConfiguration'
    azureChatExtensionType:
      enum:
        - azure_search
        - azure_cosmos_db
      type: string
      description: "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI."
      x-ms-enum:
        name: AzureChatExtensionType
        modelAsString: true
        values:
          - name: azureSearch
            value: azure_search
            description: Represents the use of Azure Search as an Azure OpenAI chat extension.
          - name: azureCosmosDB
            value: azure_cosmos_db
            description: Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension.
    azureSearchChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureSearchChatExtensionParameters'
      description: "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: azure_search
    azureSearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        endpoint:
          type: string
          description: The absolute endpoint path for the Azure Search resource to use.
          format: uri
        index_name:
          type: string
          description: The name of the index to use as available in the referenced Azure Search resource.
        fields_mapping:
          $ref: '#/components/schemas/azureSearchIndexFieldMappingOptions'
        query_type:
          $ref: '#/components/schemas/azureSearchQueryType'
        semantic_configuration:
          type: string
          description: The additional semantic configuration for the query.
        filter:
          type: string
          description: Search filter.
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
      description: Parameters for Azure Search when used as an Azure OpenAI chat extension.
    azureSearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent vector data.
      description: Optional settings to control how fields are processed when using a configured Azure Search resource.
    azureSearchQueryType:
      enum:
        - simple
        - semantic
        - vector
        - vector_simple_hybrid
        - vector_semantic_hybrid
      type: string
      description: The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      x-ms-enum:
        name: azureSearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: 'Represents the default, simple query parser.'
          - name: semantic
            value: semantic
            description: Represents the semantic query parser for advanced semantic modeling.
          - name: vector
            value: vector
            description: Represents vector search over computed data.
          - name: vectorSimpleHybrid
            value: vector_simple_hybrid
            description: Represents a combination of the simple query strategy with vector data.
          - name: vectorSemanticHybrid
            value: vector_semantic_hybrid
            description: Represents a combination of semantic search and vector data querying.
    azureCosmosDBChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureCosmosDBChatExtensionParameters'
      description: "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: azure_cosmos_db
    azureCosmosDBChatExtensionParameters:
      required:
        - authentication
        - container_name
        - database_name
        - embedding_dependency
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        database_name:
          type: string
          description: The MongoDB vCore database name to use with Azure Cosmos DB.
        container_name:
          type: string
          description: The name of the Azure Cosmos DB resource container.
        index_name:
          type: string
          description: The MongoDB vCore index name to use with Azure Cosmos DB.
        fields_mapping:
          $ref: '#/components/schemas/azureCosmosDBFieldMappingOptions'
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
      description: "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore."
    azureCosmosDBFieldMappingOptions:
      required:
        - content_fields
        - vector_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent vector data.
      description: Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource.
    onYourDataAuthenticationOptions:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataAuthenticationType'
      description: The authentication options for Azure OpenAI On Your Data.
      discriminator:
        propertyName: type
        mapping:
          api_key: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
          connection_string: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
          system_assigned_managed_identity: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
          user_assigned_managed_identity: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
    onYourDataAuthenticationType:
      enum:
        - api_key
        - connection_string
        - system_assigned_managed_identity
        - user_assigned_managed_identity
      type: string
      description: The authentication types supported with Azure OpenAI On Your Data.
      x-ms-enum:
        name: OnYourDataAuthenticationType
        modelAsString: true
        values:
          - name: apiKey
            value: api_key
            description: Authentication via API key.
          - name: connectionString
            value: connection_string
            description: Authentication via connection string.
          - name: systemAssignedManagedIdentity
            value: system_assigned_managed_identity
            description: Authentication via system-assigned managed identity.
          - name: userAssignedManagedIdentity
            value: user_assigned_managed_identity
            description: Authentication via user-assigned managed identity.
    onYourDataApiKeyAuthenticationOptions:
      required:
        - key
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            key:
              type: string
              description: The API key to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using an API key.
      x-ms-discriminator-value: api_key
    onYourDataConnectionStringAuthenticationOptions:
      required:
        - connection_string
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            connection_string:
              type: string
              description: The connection string to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using a connection string.
      x-ms-discriminator-value: connection_string
    onYourDataSystemAssignedManagedIdentityAuthenticationOptions:
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
      description: The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.
      x-ms-discriminator-value: system_assigned_managed_identity
    onYourDataUserAssignedManagedIdentityAuthenticationOptions:
      required:
        - managed_identity_resource_id
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            managed_identity_resource_id:
              type: string
              description: The resource ID of the user-assigned managed identity to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.
      x-ms-discriminator-value: user_assigned_managed_identity
    onYourDataVectorizationSource:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataVectorizationSourceType'
      description: An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.
      discriminator:
        propertyName: type
        mapping:
          endpoint: '#/components/schemas/onYourDataEndpointVectorizationSource'
          deployment_name: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
    onYourDataVectorizationSourceType:
      enum:
        - endpoint
        - deployment_name
      type: string
      description: "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search."
      x-ms-enum:
        name: OnYourDataVectorizationSourceType
        modelAsString: true
        values:
          - name: endpoint
            value: endpoint
            description: Represents vectorization performed by public service calls to an Azure OpenAI embedding model.
          - name: deploymentName
            value: deployment_name
            description: "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
    onYourDataDeploymentNameVectorizationSource:
      required:
        - deployment_name
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            deployment_name:
              type: string
              description: 'Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks.'
      description: "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource."
      x-ms-discriminator-value: deployment_name
    onYourDataEndpointVectorizationSource:
      required:
        - authentication
        - endpoint
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            authentication:
              $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
            endpoint:
              type: string
              description: 'Specifies the endpoint to use for vectorization. This endpoint must be in the same Azure OpenAI resource, but On Your Data will use this endpoint via an internal call rather than a public one, which enables vector search even in private networks.'
              format: uri
      description: "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings."
      x-ms-discriminator-value: endpoint
    azureChatExtensionsMessageContext:
      type: object
      properties:
        citations:
          type: array
          items:
            $ref: '#/components/schemas/citation'
          description: 'The data source retrieval result, used to generate the assistant message in the response.'
          x-ms-identifiers: [ ]
        intent:
          type: string
          description: 'The detected intent from the chat history, used to pass to the next turn to carry over the context.'
      description: "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension."
    citation:
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: The content of the citation.
        title:
          type: string
          description: The title of the citation.
        url:
          type: string
          description: The URL of the citation.
        filepath:
          type: string
          description: The file path of the citation.
        chunk_id:
          type: string
          description: The chunk ID of the citation.
      description: citation information for a chat completions response message.
    chatCompletionMessageToolCall:
      required:
        - id
        - type
        - function
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          $ref: '#/components/schemas/toolCallType'
        function:
          required:
            - name
            - arguments
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.'
          description: The function that the model called.
    toolCallType:
      enum:
        - function
      type: string
      description: 'The type of the tool call, in this case `function`.'
      x-ms-enum:
        name: ToolCallType
        modelAsString: true
        values:
          - value: function
            description: The tool call type is function.
    chatCompletionRequestMessageTool:
      required:
        - tool_call_id
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            tool_call_id:
              type: string
              description: Tool call that this message is responding to.
            content:
              type: string
              description: The contents of the message.
              nullable: true
          nullable: true
    chatCompletionRequestMessageFunction:
      required:
        - function_call_id
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            role:
              enum:
                - function
              type: string
              description: 'The role of the messages author, in this case `function`.'
            name:
              type: string
              description: The contents of the message.
            content:
              type: string
              description: The contents of the message.
              nullable: true
          description: Deprecated. Message that represents a function.
          nullable: true
    createChatCompletionResponse:
      required:
        - id
        - object
        - created
        - model
        - choices
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsResponseCommon'
        - properties:
            prompt_filter_results:
              $ref: '#/components/schemas/promptFilterResults'
            choices:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/chatCompletionChoiceCommon'
                  - properties:
                      message:
                        $ref: '#/components/schemas/chatCompletionResponseMessage'
                      content_filter_results:
                        $ref: '#/components/schemas/contentFilterChoiceResults'
    chatCompletionResponseMessage:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionResponseMessageRole'
        content:
          type: string
          description: The contents of the message.
          nullable: true
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/chatCompletionMessageToolCall'
          description: 'The tool calls generated by the model, such as function calls.'
        function_call:
          $ref: '#/components/schemas/chatCompletionFunctionCall'
        context:
          $ref: '#/components/schemas/azureChatExtensionsMessageContext'
      description: A chat completion message generated by the model.
    chatCompletionResponseMessageRole:
      enum:
        - assistant
      type: string
      description: The role of the author of the response message.
    chatCompletionToolChoiceOption:
      oneOf:
        - enum:
            - none
            - auto
          type: string
          description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
        - $ref: '#/components/schemas/chatCompletionNamedToolChoice'
      description: 'Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.'
    chatCompletionNamedToolChoice:
      type: object
      properties:
        type:
          enum:
            - function
          type: string
          description: 'The type of the tool. Currently, only `function` is supported.'
        function:
          required:
            - name
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
    chatCompletionFunctionCall:
      required:
        - name
        - arguments
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.'
      description: 'Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.'
    chatCompletionsResponseCommon:
      required:
        - id
        - object
        - created
        - model
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        object:
          $ref: '#/components/schemas/chatCompletionResponseObject'
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was created.
          format: unixtime
        model:
          type: string
          description: The model used for the chat completion.
        usage:
          $ref: '#/components/schemas/completionUsage'
        system_fingerprint:
          type: string
          description: Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
    chatCompletionResponseObject:
      enum:
        - chat.completion
      type: string
      description: The object type.
      x-ms-enum:
        name: ChatCompletionResponseObject
        modelAsString: true
        values:
          - value: chat.completion
            description: The object type is chat completion.
    completionUsage:
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt.
        completion_tokens:
          type: integer
          description: Number of tokens in the generated completion.
        total_tokens:
          type: integer
          description: Total number of tokens used in the request (prompt + completion).
      description: Usage statistics for the completion request.
    chatCompletionTool:
      required:
        - type
        - function
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionToolType'
        function:
          required:
            - name
            - parameters
          type: object
          properties:
            description:
              type: string
              description: 'A description of what the function does, used by the model to choose when and how to call the function.'
            name:
              type: string
              description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
            parameters:
              $ref: '#/components/schemas/chatCompletionFunctionParameters'
    chatCompletionToolType:
      enum:
        - function
      type: string
      description: 'The type of the tool. Currently, only `function` is supported.'
      x-ms-enum:
        name: ChatCompletionToolType
        modelAsString: true
        values:
          - value: function
            description: The tool type is function.
    chatCompletionChoiceCommon:
      type: object
      properties:
        index:
          type: integer
        finish_reason:
          type: string
    createTranslationRequest:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          description: The audio file to translate.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          description: 'The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.'
          default: 0
      description: Translation request.
    audioResponse:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: Translated or transcribed text.
      description: Translation or transcription response when response_format was json
    audioVerboseResponse:
      required:
        - text
      type: object
      allOf:
        - $ref: '#/components/schemas/audioResponse'
        - properties:
            task:
              enum:
                - transcribe
                - translate
              type: string
              description: Type of audio task.
              x-ms-enum:
                modelAsString: true
            language:
              type: string
              description: Language.
            duration:
              type: number
              description: Duration.
            segments:
              type: array
              items:
                $ref: '#/components/schemas/audioSegment'
      description: Translation or transcription response when response_format was verbose_json
    audioResponseFormat:
      title: AudioResponseFormat
      enum:
        - json
        - text
        - srt
        - verbose_json
        - vtt
      type: string
      description: Defines the format of the output.
      x-ms-enum:
        modelAsString: true
    createTranscriptionRequest:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          description: The audio file object to transcribe.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          description: 'The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.'
          default: 0
        language:
          type: string
          description: The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.
      description: Transcription request.
    audioSegment:
      type: object
      properties:
        id:
          type: integer
          description: Segment identifier.
        seek:
          type: number
          description: Offset of the segment.
        start:
          type: number
          description: Segment start offset.
        end:
          type: number
          description: Segment end offset.
        text:
          type: string
          description: Segment text.
        tokens:
          type: array
          items:
            type: number
          description: Tokens of the text.
        temperature:
          type: number
          description: Temperature.
        avg_logprob:
          type: number
          description: Average log probability.
        compression_ratio:
          type: number
          description: Compression ratio.
        no_speech_prob:
          type: number
          description: Probability of 'no speech'.
      description: Transcription or translation segment.
    imageQuality:
      enum:
        - standard
        - hd
      type: string
      description: The quality of the image that will be generated.
      default: standard
      x-ms-enum:
        name: Quality
        modelAsString: true
        values:
          - value: standard
            description: Standard quality creates images with standard quality.
            name: Standard
          - value: hd
            description: HD quality creates images with finer details and greater consistency across the image.
            name: HD
    imagesResponseFormat:
      enum:
        - url
        - b64_json
      type: string
      description: The format in which the generated images are returned.
      default: url
      x-ms-enum:
        name: ImagesResponseFormat
        modelAsString: true
        values:
          - value: url
            description: The URL that provides temporary access to download the generated images.
            name: Url
          - value: b64_json
            description: The generated images are returned as base64 encoded string.
            name: Base64Json
    imageSize:
      enum:
        - 1792x1024
        - 1024x1792
        - 1024x1024
      type: string
      description: The size of the generated images.
      default: 1024x1024
      x-ms-enum:
        name: Size
        modelAsString: true
        values:
          - value: 1792x1024
            description: The desired size of the generated image is 1792x1024 pixels.
            name: Size1792x1024
          - value: 1024x1792
            description: The desired size of the generated image is 1024x1792 pixels.
            name: Size1024x1792
          - value: 1024x1024
            description: The desired size of the generated image is 1024x1024 pixels.
            name: Size1024x1024
    imageStyle:
      enum:
        - vivid
        - natural
      type: string
      description: The style of the generated images.
      default: vivid
      x-ms-enum:
        name: Style
        modelAsString: true
        values:
          - value: vivid
            description: Vivid creates images that are hyper-realistic and dramatic.
            name: Vivid
          - value: natural
            description: Natural creates images that are more natural and less hyper-realistic.
            name: Natural
    imageGenerationsRequest:
      required:
        - prompt
      type: object
      properties:
        prompt:
          minLength: 1
          type: string
          description: A text description of the desired image(s). The maximum length is 4000 characters.
          format: string
          example: a corgi in a field
        n:
          maximum: 1.0
          minimum: 1.0
          type: integer
          description: The number of images to generate.
          default: 1
        size:
          $ref: '#/components/schemas/imageSize'
        response_format:
          $ref: '#/components/schemas/imagesResponseFormat'
        user:
          type: string
          description: 'A unique identifier representing your end-user, which can help to monitor and detect abuse.'
          format: string
          example: user123456
        quality:
          $ref: '#/components/schemas/imageQuality'
        style:
          $ref: '#/components/schemas/imageStyle'
    generateImagesResponse:
      required:
        - created
        - data
      type: object
      properties:
        created:
          type: integer
          description: The unix timestamp when the operation was created.
          format: unixtime
          example: '1676540381'
        data:
          type: array
          items:
            $ref: '#/components/schemas/imageResult'
          description: 'The result data of the operation, if successful'
    imageResult:
      type: object
      properties:
        url:
          type: string
          description: The image url.
          example: https://www.contoso.com
        b64_json:
          type: string
          description: The base64 encoded image
        content_filter_results:
          $ref: '#/components/schemas/dalleContentFilterResults'
        revised_prompt:
          type: string
          description: 'The prompt that was used to generate the image, if there was any revision to the prompt.'
        prompt_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
      description: 'The image url or encoded image if successful, and an error otherwise.'
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]