openapi: 3.0.1
info:
  title: Azure Search Index
  description: 'Client that can be used to query an index and upload, merge, or delete documents.'
  version: '1.0'
servers:
  - url: https://REPLACE/az-search-index
paths:
  '/indexes/{index-name}/docs/$count':
    get:
      tags:
        - Documents
      summary: Documents_Count
      description: Queries the number of documents in the index.
      operationId: Documents_Count
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            enum:
              - product-info
            type: string
            default: product-info
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            enum:
              - '2023-11-01'
            type: string
            default: '2023-11-01'
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Docs-countGet200ApplicationJsonResponse'
              example: 0
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs':
    get:
      tags:
        - Documents
      summary: Documents_SearchGet
      description: Searches for documents in the index.
      operationId: Documents_SearchGet
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            enum:
              - product-info
            type: string
            default: product-info
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - 2023-10-01-Preview
              - '2023-11-01'
            type: string
            default: '2023-11-01'
        - name: search
          in: query
          description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          schema:
            type: string
        - name: $count
          in: query
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          schema:
            type: boolean
        - name: facet
          in: query
          description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
          schema:
            type: array
            items:
              type: string
        - name: $filter
          in: query
          description: The OData $filter expression to apply to the search query.
          schema:
            type: string
        - name: highlight
          in: query
          description: The list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          schema:
            type: array
            items:
              type: string
        - name: highlightPostTag
          in: query
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
          schema:
            type: string
        - name: highlightPreTag
          in: query
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
          schema:
            type: string
        - name: minimumCoverage
          in: query
          description: Format - double. Format - double. A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
          schema:
            type: number
            format: double
        - name: $orderby
          in: query
          description: 'The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.'
          schema:
            type: array
            items:
              type: string
        - name: queryType
          in: query
          description: A value that specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
          schema:
            enum:
              - simple
              - full
              - semantic
            type: string
        - name: scoringParameter
          in: query
          description: 'The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called ''mylocation'' the parameter string would be "mylocation--122.2,44.8" (without the quotes).'
          schema:
            type: array
            items:
              type: string
        - name: scoringProfile
          in: query
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
          schema:
            type: string
        - name: searchFields
          in: query
          description: 'The list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.'
          schema:
            type: array
            items:
              type: string
        - name: searchMode
          in: query
          description: A value that specifies whether any or all of the search terms must be matched in order to count the document as a match.
          schema:
            enum:
              - any
              - all
            type: string
        - name: scoringStatistics
          in: query
          description: 'A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency.'
          schema:
            enum:
              - local
              - global
            type: string
        - name: sessionId
          in: query
          description: 'A value to be used to create a sticky session, which can help to get more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a ''_'' character.'
          schema:
            type: string
        - name: $select
          in: query
          description: 'The list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
          schema:
            type: array
            items:
              type: string
        - name: $skip
          in: query
          description: 'Format - int32. Format - int32. The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use $skip due to this limitation, consider using $orderby on a totally-ordered key and $filter with a range query instead.'
          schema:
            type: integer
            format: int32
        - name: $top
          in: query
          description: 'Format - int32. Format - int32. The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.'
          schema:
            type: integer
            format: int32
        - name: semanticConfiguration
          in: query
          description: 'The name of the semantic configuration that lists which fields should be used for semantic ranking, captions, highlights, and answers'
          schema:
            type: string
        - name: semanticErrorHandling
          in: query
          description: 'Allows the user to choose whether a semantic call should fail completely, or to return partial results.'
          schema:
            enum:
              - partial
              - fail
            type: string
        - name: semanticMaxWaitInMilliseconds
          in: query
          description: Format - int32. Format - int32. Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails.
          schema:
            minimum: 700
            type: integer
            format: int32
        - name: answers
          in: query
          description: 'This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7.'
          schema:
            enum:
              - none
              - extractive
            type: string
        - name: captions
          in: query
          description: 'This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`.'
          schema:
            enum:
              - none
              - extractive
            type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      responses:
        '200':
          description: Response containing documents that match the search criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDocumentsResult'
              example:
                '@odata.count': 0
                '@search.coverage': 0
                '@search.facets': { }
                '@search.answers':
                  - score: 0
                    key: string
                    text: string
                    highlights: string
                '@search.nextPageParameters':
                  count: true
                  facets:
                    - string
                  filter: string
                  highlight: string
                  highlightPostTag: string
                  highlightPreTag: string
                  minimumCoverage: 0
                  orderby: string
                  queryType: simple
                  scoringStatistics: local
                  sessionId: string
                  scoringParameters:
                    - string
                  scoringProfile: string
                  search: string
                  searchFields: string
                  searchMode: any
                  select: string
                  skip: 0
                  top: 0
                  semanticConfiguration: string
                  semanticErrorHandling: partial
                  semanticMaxWaitInMilliseconds: 0
                  answers: none
                  captions: none
                  vectorQueries:
                    - kind: vector
                      k: 0
                      fields: string
                      exhaustive: true
                  vectorFilterMode: postFilter
                value:
                  - '@search.score': 0
                    '@search.rerankerScore': 0
                    '@search.highlights': { }
                    '@search.captions':
                      - text: string
                        highlights: string
                '@odata.nextLink': string
                '@search.semanticPartialResponseReason': maxWaitExceeded
                '@search.semanticPartialResponseType': baseResults
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.post.search':
    post:
      tags:
        - Documents
      summary: Documents_SearchPost
      description: Searches for documents in the index.
      operationId: Documents_SearchPost
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      requestBody:
        description: The definition of the Search request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
            example:
              count: true
              facets:
                - string
              filter: string
              highlight: string
              highlightPostTag: string
              highlightPreTag: string
              minimumCoverage: 0
              orderby: string
              queryType: simple
              scoringStatistics: local
              sessionId: string
              scoringParameters:
                - string
              scoringProfile: string
              search: string
              searchFields: string
              searchMode: any
              select: string
              skip: 0
              top: 0
              semanticConfiguration: string
              semanticErrorHandling: partial
              semanticMaxWaitInMilliseconds: 0
              answers: none
              captions: none
              vectorQueries:
                - kind: vector
                  k: 0
                  fields: string
                  exhaustive: true
              vectorFilterMode: postFilter
      responses:
        '200':
          description: Response containing documents that match the search criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDocumentsResult'
              example:
                '@odata.count': 0
                '@search.coverage': 0
                '@search.facets': { }
                '@search.answers':
                  - score: 0
                    key: string
                    text: string
                    highlights: string
                '@search.nextPageParameters':
                  count: true
                  facets:
                    - string
                  filter: string
                  highlight: string
                  highlightPostTag: string
                  highlightPreTag: string
                  minimumCoverage: 0
                  orderby: string
                  queryType: simple
                  scoringStatistics: local
                  sessionId: string
                  scoringParameters:
                    - string
                  scoringProfile: string
                  search: string
                  searchFields: string
                  searchMode: any
                  select: string
                  skip: 0
                  top: 0
                  semanticConfiguration: string
                  semanticErrorHandling: partial
                  semanticMaxWaitInMilliseconds: 0
                  answers: none
                  captions: none
                  vectorQueries:
                    - kind: vector
                      k: 0
                      fields: string
                      exhaustive: true
                  vectorFilterMode: postFilter
                value:
                  - '@search.score': 0
                    '@search.rerankerScore': 0
                    '@search.highlights': { }
                    '@search.captions':
                      - text: string
                        highlights: string
                '@odata.nextLink': string
                '@search.semanticPartialResponseReason': maxWaitExceeded
                '@search.semanticPartialResponseType': baseResults
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs(''{key}'')':
    get:
      tags:
        - Documents
      summary: Documents_Get
      description: Retrieves a document from the index.
      operationId: Documents_Get
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: key
          in: path
          description: The key of the document to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: $select
          in: query
          description: List of field names to retrieve for the document; Any field not retrieved will be missing from the returned document.
          schema:
            type: array
            items:
              type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      responses:
        '200':
          description: Response containing the requested document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupDocument'
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.suggest':
    get:
      tags:
        - Documents
      summary: Documents_SuggestGet
      description: Suggests documents in the index that match the given partial query text.
      operationId: Documents_SuggestGet
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: search
          in: query
          description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
          required: true
          schema:
            type: string
        - name: suggesterName
          in: query
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData expression that filters the documents considered for suggestions.
          schema:
            type: string
        - name: fuzzy
          in: query
          description: 'A value indicating whether to use fuzzy matching for the suggestions query. Default is false. When set to true, the query will find terms even if there''s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestions queries are slower and consume more resources.'
          schema:
            type: boolean
        - name: highlightPostTag
          in: query
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
          schema:
            type: string
        - name: highlightPreTag
          in: query
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
          schema:
            type: string
        - name: minimumCoverage
          in: query
          description: Format - double. Format - double. A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestions query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          schema:
            type: number
            format: double
        - name: $orderby
          in: query
          description: 'The list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.'
          schema:
            type: array
            items:
              type: string
        - name: searchFields
          in: query
          description: The list of field names to search for the specified search text. Target fields must be included in the specified suggester.
          schema:
            type: array
            items:
              type: string
        - name: $select
          in: query
          description: 'The list of fields to retrieve. If unspecified, only the key field will be included in the results.'
          schema:
            type: array
            items:
              type: string
        - name: $top
          in: query
          description: Format - int32. Format - int32. The number of suggestions to retrieve. The value must be a number between 1 and 100. The default is 5.
          schema:
            type: integer
            format: int32
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      responses:
        '200':
          description: Response containing suggested documents that match the partial input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestDocumentsResult'
              example:
                value:
                  - '@search.text': string
                '@search.coverage': 0
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.post.suggest':
    post:
      tags:
        - Documents
      summary: Documents_SuggestPost
      description: Suggests documents in the index that match the given partial query text.
      operationId: Documents_SuggestPost
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      requestBody:
        description: The Suggest request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuggestRequest'
            example:
              filter: string
              fuzzy: true
              highlightPostTag: string
              highlightPreTag: string
              minimumCoverage: 0
              orderby: string
              search: string
              searchFields: string
              select: string
              suggesterName: string
              top: 0
      responses:
        '200':
          description: Response containing suggested documents that match the partial input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuggestDocumentsResult'
              example:
                value:
                  - '@search.text': string
                '@search.coverage': 0
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.index':
    post:
      tags:
        - Documents
      summary: Documents_Index
      description: Sends a batch of document write actions to the index.
      operationId: Documents_Index
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      requestBody:
        description: The batch of index actions.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndexBatch'
            example:
              value:
                - '@search.action': upload
      responses:
        '200':
          description: Response containing the status of operations for all actions in the batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentsResult'
              example:
                value:
                  - key: string
                    errorMessage: string
                    status: true
                    statusCode: 0
        '207':
          description: Response containing the status of operations for all actions in the batch.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexDocumentsResult'
              example:
                value:
                  - key: string
                    errorMessage: string
                    status: true
                    statusCode: 0
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.autocomplete':
    get:
      tags:
        - Documents
      summary: Documents_AutocompleteGet
      description: Autocompletes incomplete query terms based on input text and matching terms in the index.
      operationId: Documents_AutocompleteGet
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: The incomplete term which should be auto-completed.
          required: true
          schema:
            type: string
        - name: suggesterName
          in: query
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
          required: true
          schema:
            type: string
        - name: autocompleteMode
          in: query
          description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context while producing auto-completed terms.
          schema:
            enum:
              - oneTerm
              - twoTerms
              - oneTermWithContext
            type: string
        - name: $filter
          in: query
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
          schema:
            type: string
        - name: fuzzy
          in: query
          description: 'A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will find terms even if there''s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.'
          schema:
            type: boolean
        - name: highlightPostTag
          in: query
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
          schema:
            type: string
        - name: highlightPreTag
          in: query
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
          schema:
            type: string
        - name: minimumCoverage
          in: query
          description: Format - double. Format - double. A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          schema:
            type: number
            format: double
        - name: searchFields
          in: query
          description: The list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
          schema:
            type: array
            items:
              type: string
        - name: $top
          in: query
          description: Format - int32. Format - int32. The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
          schema:
            type: integer
            format: int32
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      responses:
        '200':
          description: Response containing suggested query terms that complete the partial input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteResult'
              example:
                '@search.coverage': 0
                value:
                  - text: string
                    queryPlusText: string
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
  '/indexes(''{index-name}'')/docs/search.post.autocomplete':
    post:
      tags:
        - Documents
      summary: Documents_AutocompletePost
      description: Autocompletes incomplete query terms based on input text and matching terms in the index.
      operationId: Documents_AutocompletePost
      parameters:
        - name: index-name
          in: path
          required: true
          schema:
            type: ''
        - name: api-version
          in: query
          description: Client Api Version.
          required: true
          schema:
            type: string
        - name: x-ms-client-request-id
          in: header
          description: Format - uuid. Format - uuid. The tracking ID sent with the request to help with debugging.
          schema:
            type: string
      requestBody:
        description: The definition of the Autocomplete request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutocompleteRequest'
            example:
              search: string
              autocompleteMode: oneTerm
              filter: string
              fuzzy: true
              highlightPostTag: string
              highlightPreTag: string
              minimumCoverage: 0
              searchFields: string
              suggesterName: string
              top: 0
      responses:
        '200':
          description: Response containing suggested query terms that complete the partial input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutocompleteResult'
              example:
                '@search.coverage': 0
                value:
                  - text: string
                    queryPlusText: string
        '500':
          description: Error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchError'
components:
  schemas:
    SuggestDocumentsResult:
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/SuggestResult'
          description: The sequence of results returned by the query.
          readOnly: true
          x-ms-client-name: Results
        '@search.coverage':
          type: number
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not set in the request.'
          format: double
          readOnly: true
          x-ms-client-name: Coverage
      description: Response containing suggestion query results from an index.
    SuggestResult:
      required:
        - '@search.text'
      properties:
        '@search.text':
          type: string
          description: The text of the suggestion result.
          readOnly: true
          x-ms-client-name: Text
      description: 'A result containing a document found by a suggestion query, plus associated metadata.'
    FacetResult:
      properties:
        count:
          type: integer
          description: The approximate count of documents falling within the bucket described by this facet.
          format: int64
          readOnly: true
      description: A single bucket of a facet query result. Reports the number of documents with a field value falling within a particular range or having a particular value or interval.
    SearchDocumentsResult:
      required:
        - value
      properties:
        '@odata.count':
          type: integer
          description: 'The total count of results found by the search operation, or null if the count was not requested. If present, the count may be greater than the number of results in this response. This can happen if you use the $top or $skip parameters, or if the query can''t return all the requested documents in a single response.'
          format: int64
          readOnly: true
          x-ms-client-name: Count
        '@search.coverage':
          type: number
          description: 'A value indicating the percentage of the index that was included in the query, or null if minimumCoverage was not specified in the request.'
          format: double
          readOnly: true
          x-ms-client-name: Coverage
        '@search.facets':
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FacetResult'
          description: 'The facet query results for the search operation, organized as a collection of buckets for each faceted field; null if the query did not include any facet expressions.'
          readOnly: true
          x-ms-client-name: Facets
        '@search.answers':
          type: array
          items:
            $ref: '#/components/schemas/AnswerResult'
          description: The answers query results for the search operation; null if the answers query parameter was not specified or set to 'none'.
          readOnly: true
          x-ms-client-name: Answers
          x-nullable: true
        '@search.nextPageParameters':
          $ref: '#/components/schemas/SearchRequest'
        value:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
          description: The sequence of results returned by the query.
          readOnly: true
          x-ms-client-name: Results
        '@odata.nextLink':
          type: string
          description: Continuation URL returned when the query can't return all the requested results in a single response. You can use this URL to formulate another GET or POST Search request to get the next part of the search response. Make sure to use the same verb (GET or POST) as the request that produced this response.
          readOnly: true
          x-ms-client-name: NextLink
        '@search.semanticPartialResponseReason':
          $ref: '#/components/schemas/SemanticPartialResponseReason'
        '@search.semanticPartialResponseType':
          $ref: '#/components/schemas/SemanticPartialResponseType'
      description: Response containing search results from an index.
    SearchResult:
      required:
        - '@search.score'
      properties:
        '@search.score':
          type: number
          description: The relevance score of the document compared to other documents returned by the query.
          format: double
          readOnly: true
          x-ms-client-name: Score
          x-nullable: false
        '@search.rerankerScore':
          type: number
          description: The relevance score computed by the semantic ranker for the top search results. Search results are sorted by the RerankerScore first and then by the Score. RerankerScore is only returned for queries of type `semantic`.
          format: double
          readOnly: true
          x-ms-client-name: RerankerScore
          x-nullable: true
        '@search.highlights':
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: 'Text fragments from the document that indicate the matching search terms, organized by each applicable field; null if hit highlighting was not enabled for the query.'
          readOnly: true
          x-ms-client-name: Highlights
        '@search.captions':
          type: array
          items:
            $ref: '#/components/schemas/CaptionResult'
          description: Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type `semantic`.
          readOnly: true
          x-ms-client-name: Captions
          x-nullable: true
      description: 'Contains a document found by a search query, plus associated metadata.'
    LookupDocument:
      type: object
      description: A document retrieved via a document lookup operation.
    IndexBatch:
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/IndexAction'
          description: The actions in the batch.
          x-ms-client-name: Actions
      description: Contains a batch of document write actions to send to the index.
      example:
        value:
          - '@search.action': upload
    IndexAction:
      properties:
        '@search.action':
          enum:
            - upload
            - merge
            - mergeOrUpload
            - delete
          type: string
          description: The operation to perform on a document in an indexing batch.
          x-ms-enum:
            name: IndexActionType
            modelAsString: false
            values:
              - value: upload
                name: Upload
                description: Inserts the document into the index if it is new and updates it if it exists. All fields are replaced in the update case.
              - value: merge
                name: Merge
                description: 'Merges the specified field values with an existing document. If the document does not exist, the merge will fail. Any field you specify in a merge will replace the existing field in the document. This also applies to collections of primitive and complex types.'
              - value: mergeOrUpload
                name: MergeOrUpload
                description: 'Behaves like merge if a document with the given key already exists in the index. If the document does not exist, it behaves like upload with a new document.'
              - value: delete
                name: Delete
                description: 'Removes the specified document from the index. Any field you specify in a delete operation other than the key field will be ignored. If you want to remove an individual field from a document, use merge instead and set the field explicitly to null.'
          x-ms-client-name: ActionType
          x-nullable: false
      description: Represents an index action that operates on a document.
    IndexingResult:
      required:
        - key
        - status
        - statusCode
      properties:
        key:
          type: string
          description: The key of a document that was in the indexing request.
          readOnly: true
        errorMessage:
          type: string
          description: The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.
          readOnly: true
        status:
          type: boolean
          description: A value indicating whether the indexing operation succeeded for the document identified by the key.
          readOnly: true
          x-ms-client-name: Succeeded
          x-nullable: false
        statusCode:
          type: integer
          description: 'The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.'
          format: int32
          readOnly: true
          x-nullable: false
      description: Status of an indexing operation for a single document.
    IndexDocumentsResult:
      required:
        - value
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/IndexingResult'
          description: The list of status information for each document in the indexing request.
          readOnly: true
          x-ms-client-name: Results
      description: Response containing the status of operations for all documents in the indexing request.
    SearchMode:
      enum:
        - any
        - all
      type: string
      description: Specifies whether any or all of the search terms must be matched in order to count the document as a match.
      x-ms-enum:
        name: SearchMode
        modelAsString: false
        values:
          - value: any
            name: Any
            description: Any of the search terms must be matched in order to count the document as a match.
          - value: all
            name: All
            description: All of the search terms must be matched in order to count the document as a match.
    QueryType:
      enum:
        - simple
        - full
        - semantic
      type: string
      description: Specifies the syntax of the search query. The default is 'simple'. Use 'full' if your query uses the Lucene query syntax.
      x-ms-enum:
        name: QueryType
        modelAsString: false
        values:
          - value: simple
            name: Simple
            description: 'Uses the simple query syntax for searches. Search text is interpreted using a simple query language that allows for symbols such as +, * and "". Queries are evaluated across all searchable fields by default, unless the searchFields parameter is specified.'
          - value: full
            name: Full
            description: 'Uses the full Lucene query syntax for searches. Search text is interpreted using the Lucene query language which allows field-specific and weighted searches, as well as other advanced features.'
          - value: semantic
            name: Semantic
            description: Best suited for queries expressed in natural language as opposed to keywords. Improves precision of search results by re-ranking the top search results using a ranking model trained on the Web corpus.
    VectorQuery:
      required:
        - kind
      type: object
      properties:
        kind:
          $ref: '#/components/schemas/VectorQueryKind'
        k:
          type: integer
          description: Number of nearest neighbors to return as top hits.
          format: int32
        fields:
          type: string
          description: Vector Fields of type Collection(Edm.Single) to be included in the vector searched.
        exhaustive:
          type: boolean
          description: 'When true, triggers an exhaustive k-nearest neighbor search across all vectors within the vector index. Useful for scenarios where exact matches are critical, such as determining ground truth values.'
      description: The query parameters for vector and hybrid search queries.
      discriminator:
        propertyName: kind
    RawVectorQuery:
      required:
        - vector
      type: object
      allOf:
        - $ref: '#/components/schemas/VectorQuery'
      properties:
        vector:
          type: array
          items:
            type: number
            format: float
          description: The vector representation of a search query.
      description: The query parameters to use for vector search when a raw vector value is provided.
      x-ms-discriminator-value: vector
    VectorQueryKind:
      enum:
        - vector
      type: string
      description: The kind of vector query being performed.
      x-ms-enum:
        name: VectorQueryKind
        modelAsString: true
        values:
          - value: vector
            name: Vector
            description: Vector query where a raw vector value is provided.
    VectorFilterMode:
      enum:
        - postFilter
        - preFilter
      type: string
      description: Determines whether or not filters are applied before or after the vector search is performed.
      x-ms-enum:
        name: VectorFilterMode
        modelAsString: true
        values:
          - value: postFilter
            name: PostFilter
            description: 'The filter will be applied after the candidate set of vector results is returned. Depending on the filter selectivity, this can result in fewer results than requested by the parameter ''k''.'
          - value: preFilter
            name: PreFilter
            description: The filter will be applied before the search query.
    ScoringStatistics:
      enum:
        - local
        - global
      type: string
      description: 'A value that specifies whether we want to calculate scoring statistics (such as document frequency) globally for more consistent scoring, or locally, for lower latency. The default is ''local''. Use ''global'' to aggregate scoring statistics globally before scoring. Using global scoring statistics can increase latency of search queries.'
      x-ms-enum:
        name: ScoringStatistics
        modelAsString: false
        values:
          - value: local
            name: Local
            description: The scoring statistics will be calculated locally for lower latency.
          - value: global
            name: Global
            description: The scoring statistics will be calculated globally for more consistent scoring.
    AutocompleteMode:
      enum:
        - oneTerm
        - twoTerms
        - oneTermWithContext
      type: string
      description: Specifies the mode for Autocomplete. The default is 'oneTerm'. Use 'twoTerms' to get shingles and 'oneTermWithContext' to use the current context in producing autocomplete terms.
      x-ms-enum:
        name: AutocompleteMode
        modelAsString: false
        values:
          - value: oneTerm
            name: OneTerm
            description: 'Only one term is suggested. If the query has two terms, only the last term is completed. For example, if the input is ''washington medic'', the suggested terms could include ''medicaid'', ''medicare'', and ''medicine''.'
          - value: twoTerms
            name: TwoTerms
            description: 'Matching two-term phrases in the index will be suggested. For example, if the input is ''medic'', the suggested terms could include ''medicare coverage'' and ''medical assistant''.'
          - value: oneTermWithContext
            name: OneTermWithContext
            description: 'Completes the last term in a query with two or more terms, where the last two terms are a phrase that exists in the index. For example, if the input is ''washington medic'', the suggested terms could include ''washington medicaid'' and ''washington medical''.'
    SearchRequest:
      properties:
        count:
          type: boolean
          description: A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
          x-ms-client-name: IncludeTotalResultCount
        facets:
          type: array
          items:
            type: string
          description: 'The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.'
          externalDocs:
            url: https://docs.microsoft.com/rest/api/searchservice/Search-Documents
        filter:
          type: string
          description: The OData $filter expression to apply to the search query.
          externalDocs:
            url: https://docs.microsoft.com/rest/api/searchservice/OData-Expression-Syntax-for-Azure-Search
        highlight:
          type: string
          description: The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
          x-ms-client-name: HighlightFields
        highlightPostTag:
          type: string
          description: A string tag that is appended to hit highlights. Must be set with highlightPreTag. Default is &lt;/em&gt;.
        highlightPreTag:
          type: string
          description: A string tag that is prepended to hit highlights. Must be set with highlightPostTag. Default is &lt;em&gt;.
        minimumCoverage:
          type: number
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
          format: double
        orderby:
          type: string
          description: 'The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.'
          x-ms-client-name: OrderBy
        queryType:
          $ref: '#/components/schemas/QueryType'
        scoringStatistics:
          $ref: '#/components/schemas/ScoringStatistics'
        sessionId:
          type: string
          description: 'A value to be used to create a sticky session, which can help getting more consistent results. As long as the same sessionId is used, a best-effort attempt will be made to target the same replica set. Be wary that reusing the same sessionID values repeatedly can interfere with the load balancing of the requests across replicas and adversely affect the performance of the search service. The value used as sessionId cannot start with a ''_'' character.'
        scoringParameters:
          type: array
          items:
            type: string
          description: 'The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name-values. For example, if the scoring profile defines a function with a parameter called ''mylocation'' the parameter string would be "mylocation--122.2,44.8" (without the quotes).'
        scoringProfile:
          type: string
          description: The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
        search:
          type: string
          description: A full-text search query expression; Use "*" or omit this parameter to match all documents.
          x-ms-client-name: SearchText
        searchFields:
          type: string
          description: 'The comma-separated list of field names to which to scope the full-text search. When using fielded search (fieldName:searchExpression) in a full Lucene query, the field names of each fielded search expression take precedence over any field names listed in this parameter.'
        searchMode:
          $ref: '#/components/schemas/SearchMode'
        select:
          type: string
          description: 'The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.'
        skip:
          type: integer
          description: 'The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use skip due to this limitation, consider using orderby on a totally-ordered key and filter with a range query instead.'
          format: int32
        top:
          type: integer
          description: 'The number of search results to retrieve. This can be used in conjunction with $skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be used to issue another Search request for the next page of results.'
          format: int32
        semanticConfiguration:
          type: string
          description: The name of a semantic configuration that will be used when processing documents for queries of type semantic.
        semanticErrorHandling:
          $ref: '#/components/schemas/SemanticErrorHandling'
        semanticMaxWaitInMilliseconds:
          minimum: 700
          type: integer
          description: Allows the user to set an upper bound on the amount of time it takes for semantic enrichment to finish processing before the request fails.
          format: int32
          x-nullable: true
        answers:
          $ref: '#/components/schemas/Answers'
        captions:
          $ref: '#/components/schemas/Captions'
        vectorQueries:
          type: array
          items:
            $ref: '#/components/schemas/VectorQuery'
          description: The query parameters for vector and hybrid search queries.
        vectorFilterMode:
          $ref: '#/components/schemas/VectorFilterMode'
      description: 'Parameters for filtering, sorting, faceting, paging, and other search query behaviors.'
      example:
        count: true
        facets:
          - string
        filter: string
        highlight: string
        highlightPostTag: string
        highlightPreTag: string
        minimumCoverage: 0
        orderby: string
        queryType: simple
        scoringStatistics: local
        sessionId: string
        scoringParameters:
          - string
        scoringProfile: string
        search: string
        searchFields: string
        searchMode: any
        select: string
        skip: 0
        top: 0
        semanticConfiguration: string
        semanticErrorHandling: partial
        semanticMaxWaitInMilliseconds: 0
        answers: none
        captions: none
        vectorQueries:
          - kind: vector
            k: 0
            fields: string
            exhaustive: true
        vectorFilterMode: postFilter
    SuggestRequest:
      required:
        - search
        - suggesterName
      properties:
        filter:
          type: string
          description: An OData expression that filters the documents considered for suggestions.
          externalDocs:
            url: https://docs.microsoft.com/rest/api/searchservice/OData-Expression-Syntax-for-Azure-Search
        fuzzy:
          type: boolean
          description: 'A value indicating whether to use fuzzy matching for the suggestion query. Default is false. When set to true, the query will find suggestions even if there''s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.'
          x-ms-client-name: UseFuzzyMatching
        highlightPostTag:
          type: string
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting of suggestions is disabled.'
        highlightPreTag:
          type: string
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting of suggestions is disabled.'
        minimumCoverage:
          type: number
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          format: double
        orderby:
          type: string
          description: 'The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to either the geo.distance() or the search.score() functions. Each expression can be followed by asc to indicate ascending, or desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no $orderby is specified, the default sort order is descending by document match score. There can be at most 32 $orderby clauses.'
          x-ms-client-name: OrderBy
        search:
          type: string
          description: 'The search text to use to suggest documents. Must be at least 1 character, and no more than 100 characters.'
          x-ms-client-name: SearchText
        searchFields:
          type: string
          description: The comma-separated list of field names to search for the specified search text. Target fields must be included in the specified suggester.
        select:
          type: string
          description: 'The comma-separated list of fields to retrieve. If unspecified, only the key field will be included in the results.'
        suggesterName:
          type: string
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        top:
          type: integer
          description: The number of suggestions to retrieve. This must be a value between 1 and 100. The default is 5.
          format: int32
      description: 'Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.'
      example:
        filter: string
        fuzzy: true
        highlightPostTag: string
        highlightPreTag: string
        minimumCoverage: 0
        orderby: string
        search: string
        searchFields: string
        select: string
        suggesterName: string
        top: 0
    AutocompleteRequest:
      required:
        - search
        - suggesterName
      properties:
        search:
          type: string
          description: The search text on which to base autocomplete results.
          x-ms-client-name: SearchText
        autocompleteMode:
          $ref: '#/components/schemas/AutocompleteMode'
        filter:
          type: string
          description: An OData expression that filters the documents used to produce completed terms for the Autocomplete result.
          externalDocs:
            url: https://docs.microsoft.com/rest/api/searchservice/OData-Expression-Syntax-for-Azure-Search
        fuzzy:
          type: boolean
          description: 'A value indicating whether to use fuzzy matching for the autocomplete query. Default is false. When set to true, the query will autocomplete terms even if there''s a substituted or missing character in the search text. While this provides a better experience in some scenarios, it comes at a performance cost as fuzzy autocomplete queries are slower and consume more resources.'
          x-ms-client-name: UseFuzzyMatching
        highlightPostTag:
          type: string
          description: 'A string tag that is appended to hit highlights. Must be set with highlightPreTag. If omitted, hit highlighting is disabled.'
        highlightPreTag:
          type: string
          description: 'A string tag that is prepended to hit highlights. Must be set with highlightPostTag. If omitted, hit highlighting is disabled.'
        minimumCoverage:
          type: number
          description: A number between 0 and 100 indicating the percentage of the index that must be covered by an autocomplete query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
          format: double
        searchFields:
          type: string
          description: The comma-separated list of field names to consider when querying for auto-completed terms. Target fields must be included in the specified suggester.
        suggesterName:
          type: string
          description: The name of the suggester as specified in the suggesters collection that's part of the index definition.
        top:
          type: integer
          description: The number of auto-completed terms to retrieve. This must be a value between 1 and 100. The default is 5.
          format: int32
      description: 'Parameters for fuzzy matching, and other autocomplete query behaviors.'
      example:
        search: string
        autocompleteMode: oneTerm
        filter: string
        fuzzy: true
        highlightPostTag: string
        highlightPreTag: string
        minimumCoverage: 0
        searchFields: string
        suggesterName: string
        top: 0
    AutocompleteResult:
      required:
        - value
      properties:
        '@search.coverage':
          type: number
          description: 'A value indicating the percentage of the index that was considered by the autocomplete request, or null if minimumCoverage was not specified in the request.'
          format: double
          readOnly: true
          x-ms-client-name: Coverage
        value:
          type: array
          items:
            $ref: '#/components/schemas/AutocompleteItem'
          description: The list of returned Autocompleted items.
          readOnly: true
          x-ms-client-name: Results
      description: The result of Autocomplete query.
    AutocompleteItem:
      required:
        - text
        - queryPlusText
      properties:
        text:
          type: string
          description: The completed term.
          readOnly: true
        queryPlusText:
          type: string
          description: The query along with the completed term.
          readOnly: true
      description: The result of Autocomplete requests.
    SearchError:
      required:
        - message
      properties:
        code:
          type: string
          description: One of a server-defined set of error codes.
          readOnly: true
        message:
          type: string
          description: A human-readable representation of the error.
          readOnly: true
        details:
          type: array
          items:
            $ref: '#/components/schemas/SearchError'
          description: An array of details about specific errors that led to this reported error.
          readOnly: true
      description: Describes an error condition for the API.
    AnswerResult:
      properties:
        score:
          type: number
          description: The score value represents how relevant the answer is to the query relative to other answers returned for the query.
          format: double
          readOnly: true
        key:
          type: string
          description: The key of the document the answer was extracted from.
          readOnly: true
        text:
          type: string
          description: The text passage extracted from the document contents as the answer.
          readOnly: true
        highlights:
          type: string
          description: Same text passage as in the Text property with highlighted text phrases most relevant to the query.
          readOnly: true
          x-nullable: true
      description: An answer is a text passage extracted from the contents of the most relevant documents that matched the query. Answers are extracted from the top search results. Answer candidates are scored and the top answers are selected.
      x-ms-client-name: QueryAnswerResult
    CaptionResult:
      properties:
        text:
          type: string
          description: A representative text passage extracted from the document most relevant to the search query.
          readOnly: true
        highlights:
          type: string
          description: Same text passage as in the Text property with highlighted phrases most relevant to the query.
          readOnly: true
          x-nullable: true
      description: Captions are the most representative passages from the document relatively to the search query. They are often used as document summary. Captions are only returned for queries of type `semantic`.
      x-ms-client-name: QueryCaptionResult
    SemanticPartialResponseReason:
      enum:
        - maxWaitExceeded
        - capacityOverloaded
        - transient
      type: string
      description: Reason that a partial response was returned for a semantic ranking request.
      x-ms-enum:
        name: SemanticErrorReason
        modelAsString: true
        values:
          - value: maxWaitExceeded
            name: MaxWaitExceeded
            description: If `semanticMaxWaitInMilliseconds` was set and the semantic processing duration exceeded that value. Only the base results were returned.
          - value: capacityOverloaded
            name: CapacityOverloaded
            description: The request was throttled. Only the base results were returned.
          - value: transient
            name: Transient
            description: At least one step of the semantic process failed.
    SemanticPartialResponseType:
      enum:
        - baseResults
        - rerankedResults
      type: string
      description: Type of partial response that was returned for a semantic ranking request.
      x-ms-enum:
        name: SemanticSearchResultsType
        modelAsString: true
        values:
          - value: baseResults
            name: BaseResults
            description: Results without any semantic enrichment or reranking.
          - value: rerankedResults
            name: RerankedResults
            description: 'Results have been reranked with the reranker model and will include semantic captions. They will not include any answers, answers highlights or caption highlights.'
    SemanticErrorHandling:
      enum:
        - partial
        - fail
      type: string
      description: 'Allows the user to choose whether a semantic call should fail completely, or to return partial results.'
      x-ms-enum:
        name: SemanticErrorMode
        modelAsString: true
        values:
          - value: partial
            name: Partial
            description: 'If the semantic processing fails, partial results still return. The definition of partial results depends on what semantic step failed and what was the reason for failure.'
          - value: fail
            name: Fail
            description: 'If there is an exception during the semantic processing step, the query will fail and return the appropriate HTTP code depending on the error.'
    Answers:
      enum:
        - none
        - extractive
      type: string
      description: 'This parameter is only valid if the query type is `semantic`. If set, the query returns answers extracted from key passages in the highest ranked documents. The number of answers returned can be configured by appending the pipe character `|` followed by the `count-<number of answers>` option after the answers parameter value, such as `extractive|count-3`. Default count is 1. The confidence threshold can be configured by appending the pipe character `|` followed by the `threshold-<confidence threshold>` option after the answers parameter value, such as `extractive|threshold-0.9`. Default threshold is 0.7.'
      x-ms-enum:
        name: QueryAnswerType
        modelAsString: true
        values:
          - value: none
            name: None
            description: Do not return answers for the query.
          - value: extractive
            name: Extractive
            description: Extracts answer candidates from the contents of the documents returned in response to a query expressed as a question in natural language.
    Captions:
      enum:
        - none
        - extractive
      type: string
      description: 'This parameter is only valid if the query type is `semantic`. If set, the query returns captions extracted from key passages in the highest ranked documents. When Captions is set to `extractive`, highlighting is enabled by default, and can be configured by appending the pipe character `|` followed by the `highlight-<true/false>` option, such as `extractive|highlight-true`. Defaults to `None`.'
      x-ms-enum:
        name: QueryCaptionType
        modelAsString: true
        values:
          - value: none
            name: None
            description: Do not return captions for the query.
          - value: extractive
            name: Extractive
            description: Extracts captions from the matching documents that contain passages relevant to the search query.
    Docs-countGet200ApplicationJsonResponse:
      type: integer
      format: int64
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: api-key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]