<!-- 
# OpenAI Clusters Load Balancer Configuration Policy

This policy fragment is responsible for managing the configuration of OpenAI clusters. It performs the following operations:

1. **Cache Lookup**: It first tries to retrieve the OpenAI clusters configuration from the cache using the key `oaClusters`.

2. **Configuration Loading**: If the configuration is not found in the cache, it creates a new configuration. The configuration includes details about different OpenAI clusters and their routes. Each cluster has a name and a set of routes. Each route includes the following properties:
    - `name`: The name of the route.
    - `location`: The location of the route.
    - `url`: The URL of the route.
    - `priority`: The priority of the route.
    - `isThrottling`: A boolean indicating whether throttling is enabled for the route.
    - `retryAfter`: The time after which a retry should be attempted if the initial request fails.

3. **Cache Storage**: After creating the configuration, it stores the configuration back in the cache with a duration of 60 minutes. This means that subsequent requests within the next 60 minutes will retrieve the configuration from the cache instead of creating a new one.

This policy fragment is part of a larger policy and should be used in conjunction with other policy fragments to manage the routing of requests to different OpenAI clusters based on their configuration.
-->
<fragment>
    <!-- Getting OpenAI clusters configuration -->
    <cache-lookup-value key="@("oaClusters" + context.Deployment.Region + context.Api.Revision)" variable-name="oaClusters" />
    <!-- If we can't find the configuration, it will be loaded -->
    <choose>
        <when condition="@(context.Variables.ContainsKey("oaClusters") == false)">
            <set-variable name="oaClusters"
                value="@{
                    JArray routes = new JArray();
                    JArray clusters = new JArray();
                    if(context.Deployment.Region == "West Europe" || true)
                    {
                        routes.Add(new JObject()
                        {
                            { "name", "REPLACE1" },
                            { "location", "swedencentral" },
                            { "url", "https://REPLACE1.openai.azure.com" },
                            { "priority", 1},
                            { "isThrottling", false }, 
                            { "retryAfter", DateTime.MinValue } 
                        });

                        routes.Add(new JObject()
                        {
                            { "name", "REPLACE2" },
                            { "location", "westeurope" },
                            { "url", "https://REPLACE2.openai.azure.com" },
                            { "priority", 1},
                            { "isThrottling", false },
                            { "retryAfter", DateTime.MinValue }
                        });
                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "gpt-35-turbo" },
                            { "routes", new JArray(routes[0], routes[1]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "embedding" },
                            { "routes", new JArray(routes[0], routes[1]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "gpt-4" },
                            { "routes", new JArray(routes[0]) }
                        });

                        clusters.Add(new JObject()
                        {
                            { "deploymentName", "dall-e-3" },
                            { "routes", new JArray(routes[0]) }
                        });
                    }
                    else
                    {
                        //No clusters found, either return error or set default cluster
                    }
                    
                    return clusters;   
                }" />
            <!-- Add cluster configurations to cache -->
            <cache-store-value key="@("oaClusters" + context.Deployment.Region + context.Api.Revision)" value="@((JArray)context.Variables["oaClusters"])" duration="86400" />
        </when>
    </choose>
    <!-- Getting OpenAI routes configuration based on deployment name, region and api revision -->
    <cache-lookup-value key="@(context.Request.MatchedParameters["deployment-id"] + "Routes" + context.Deployment.Region + context.Api.Revision)" variable-name="routes" />
    <!-- If we can't find the configuration, it will be loaded -->
    <choose>
        <when condition="@(context.Variables.ContainsKey("routes") == false)">
            <set-variable name="routes"
                value="@{
                    string deploymentName = context.Request.MatchedParameters["deployment-id"];
                    JArray clusters = (JArray)context.Variables["oaClusters"];
                    JObject cluster = (JObject)clusters.FirstOrDefault(o => o["deploymentName"]?.Value<string>() == deploymentName);
                    if(cluster == null)
                    {
                        //Error has no cluster matched the deployment name
                        return new JArray() { new JObject()
                            {
                                { "name", deploymentName },
                                { "location", "NA" },
                                { "url", "No routes found for the deployment (" + deploymentName + ") in the region (" + context.Deployment.Region + ")" }
                            }
                        };
                    }
                    JArray routes = (JArray)cluster["routes"];
                    return routes;
                }" />
            <!-- If no routes found for deployment, return bad request with content of routes variable -->
            <choose>
                <when condition="@(((JArray)context.Variables["routes"]).ToString().Contains("No routes"))">
                    <return-response>
                        <set-status code="400" reason="No routes"/>
                        <set-body>
                            @(((JArray)context.Variables["routes"]).ToString())
                        </set-body>
                     </return-response>
                </when>
            </choose>
            <!-- Add cluster configurations to cache -->
            <cache-store-value key="@(context.Request.MatchedParameters["deployment-id"] + "Routes" + context.Deployment.Region + context.Api.Revision)" value="@((JArray)context.Variables["routes"])" duration="86400" />
        </when>
    </choose>
    <set-variable name="routeIndex" value="-1" />
    <set-variable name="remainingRoutes" value="1" />
</fragment>