openapi: 3.0.1
info:
  title: Azure OpenAI API
  description: 'Azure OpenAI APIs for completions, image, audio and search'
  version: '2024-05-01-preview'
servers:
  - url: https://REPLACED-BY-POLICY/openai
paths:
  '/deployments/{deployment-id}/completions':
    post:
      summary: 'Creates a completion for the provided prompt, parameters and chosen model.'
      description: 'Creates a completion for the provided prompt, parameters and chosen model.'
      operationId: Completions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the model which was deployed.
            example: davinci
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  oneOf:
                    - type: string
                      default: ''
                      nullable: true
                      example: This is a test.
                    - type: array
                      items:
                        type: string
                        default: ''
                        example: This is a test.
                      description: Array size minimum of 1 and maximum of 2048
                  description: "The prompt(s) to generate completions for, encoded as a string or array of strings.\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048."
                max_tokens:
                  type: integer
                  description: 'The token count of your prompt plus max_tokens cannot exceed the model''s context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0.'
                  default: 16
                  nullable: true
                  example: 16
                temperature:
                  type: number
                  description: "What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.\nWe generally recommend altering this or top_p but not both."
                  default: 1
                  nullable: true
                  example: 1
                top_p:
                  type: number
                  description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or temperature but not both."
                  default: 1
                  nullable: true
                  example: 1
                logit_bias:
                  type: object
                  description: 'Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {"50256" &#58; -100} to prevent the <|endoftext|> token from being generated.'
                user:
                  type: string
                  description: 'A unique identifier representing your end-user, which can help monitoring and detecting abuse'
                n:
                  type: integer
                  description: "How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop."
                  default: 1
                  nullable: true
                  example: 1
                stream:
                  type: boolean
                  description: 'Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.'
                  default: false
                  nullable: true
                logprobs:
                  type: integer
                  description: "Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.\nMinimum of 0 and maximum of 5 allowed."
                  default: ''
                  nullable: true
                suffix:
                  type: string
                  description: The suffix that comes after a completion of inserted text.
                  nullable: true
                echo:
                  type: boolean
                  description: Echo back the prompt in addition to the completion
                  default: false
                  nullable: true
                stop:
                  oneOf:
                    - type: string
                      default: <|endoftext|>
                      nullable: true
                      example: "\n"
                    - type: array
                      items:
                        type: string
                        example: "\n"
                      description: Array minimum size of 1 and maximum of 4
                  description: Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
                completion_config:
                  type: string
                  nullable: true
                presence_penalty:
                  type: number
                  description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model''s likelihood to talk about new topics.'
                  default: 0
                frequency_penalty:
                  type: number
                  description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model''s likelihood to repeat the same line verbatim.'
                  default: 0
                best_of:
                  type: integer
                  description: "Generates best_of completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\nWhen used with n, best_of controls the number of candidate completions and n specifies how many to return - best_of must be greater than n.\nNote: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128."
            example:
              prompt: "Negate the following sentence.The price for bubblegum increased on thursday.\n\n Negated Sentence:"
              max_tokens: 50
      responses:
        '200':
          description: OK
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - id
                  - object
                  - created
                  - model
                  - choices
                type: object
                properties:
                  id:
                    type: string
                  object:
                    type: string
                  created:
                    type: integer
                  model:
                    type: string
                  prompt_filter_results:
                    $ref: '#/components/schemas/promptFilterResults'
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        text:
                          type: string
                        index:
                          type: integer
                        logprobs:
                          type: object
                          properties:
                            tokens:
                              type: array
                              items:
                                type: string
                            token_logprobs:
                              type: array
                              items:
                                type: number
                            top_logprobs:
                              type: array
                              items:
                                type: object
                                additionalProperties:
                                  type: number
                            text_offset:
                              type: array
                              items:
                                type: integer
                          nullable: true
                        finish_reason:
                          type: string
                        content_filter_results:
                          $ref: '#/components/schemas/contentFilterChoiceResults'
                  usage:
                    required:
                      - prompt_tokens
                      - total_tokens
                      - completion_tokens
                    type: object
                    properties:
                      completion_tokens:
                        type: number
                        format: int32
                      prompt_tokens:
                        type: number
                        format: int32
                      total_tokens:
                        type: number
                        format: int32
              example:
                model: davinci
                object: text_completion
                id: cmpl-4509KAos68kxOqpE2uYGw81j6m7uo
                created: 1637097562
                choices:
                  - index: 0
                    text: The price for bubblegum decreased on thursday.
                    logprobs: ''
                    finish_reason: stop
        '400':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                      indirect_attack:
                        filtered: true
                        detected: true
                  code: string
                  message: string
        '500':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                      indirect_attack:
                        filtered: true
                        detected: true
                  code: string
                  message: string
  '/deployments/{deployment-id}/embeddings':
    post:
      summary: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
      operationId: embeddings_create
      parameters:
        - name: deployment-id
          in: path
          description: The deployment id of the model which was deployed.
          required: true
          schema:
            enum:
              - embedding
            type: string
            default: embedding
            example: ada-search-index-v1
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - 2024-05-01-preview
            type: string
            description: api version
            default: 2024-05-01-preview
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              required:
                - input
              type: object
              properties:
                input:
                  oneOf:
                    - type: string
                      default: ''
                      nullable: true
                      example: This is a test.
                    - maxItems: 2048
                      minItems: 1
                      type: array
                      items:
                        minLength: 1
                        type: string
                        example: This is a test.
                  description: "Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.\nUnless you are embedding code, we suggest replacing newlines (\\n) in your input with a single space, as we have observed inferior results when newlines are present."
                user:
                  type: string
                  description: 'A unique identifier representing your end-user, which can help monitoring and detecting abuse.'
                input_type:
                  type: string
                  description: input type of embedding search to use
                  example: query
                encoding_format:
                  type: string
                  description: The format to return the embeddings in. Can be either `float` or `base64`. Defaults to `float`.
                  nullable: true
                  example: base64
                dimensions:
                  type: integer
                  description: The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.
                  nullable: true
                  example: 1
            example:
              input: APIM love OpenAI
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                required:
                  - object
                  - model
                  - data
                  - usage
                type: object
                properties:
                  object:
                    type: string
                  model:
                    type: string
                  data:
                    type: array
                    items:
                      required:
                        - index
                        - object
                        - embedding
                      type: object
                      properties:
                        index:
                          type: integer
                        object:
                          type: string
                        embedding:
                          type: array
                          items:
                            type: number
                  usage:
                    required:
                      - prompt_tokens
                      - total_tokens
                    type: object
                    properties:
                      prompt_tokens:
                        type: integer
                      total_tokens:
                        type: integer
              example:
                object: string
                model: string
                data:
                  - index: 0
                    object: string
                    embedding:
                      - 0
                usage:
                  prompt_tokens: 0
                  total_tokens: 0
  '/deployments/{deployment-id}/chat/completions':
    post:
      summary: Creates a completion for the chat message
      description: Creates a completion for the chat message
      operationId: ChatCompletions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            enum:
              - gpt-4o
              - chat
            type: string
            description: Deployment id of the model which was deployed.
            default: gpt-4o
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - 2024-05-01-preview
            type: string
            description: api version
            default: 2024-05-01-preview
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createChatCompletionRequest'
            example:
              model: chat
              messages:
                - role: system
                  content: You are a helpful assistant that responds in Markdown. Help me with my math homework!
                - role: user
                  content: How to calculate the distance between earth and moon?
      responses:
        '200':
          description: OK
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createChatCompletionResponse'
              example:
                id: string
                object: chat.completion
                created: 0
                model: string
                usage:
                  prompt_tokens: 0
                  completion_tokens: 0
                  total_tokens: 0
                system_fingerprint: string
                prompt_filter_results:
                  - prompt_index: 0
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                      indirect_attack:
                        filtered: true
                        detected: true
                choices:
                  - index: 0
                    finish_reason: string
                    message:
                      role: assistant
                      content: string
                      tool_calls:
                        - id: string
                          type: function
                          function:
                            name: string
                            arguments: string
                      function_call:
                        name: string
                        arguments: string
                      context:
                        citations:
                          - content: string
                            title: string
                            url: string
                            filepath: string
                            chunk_id: string
                        intent: string
                        all_retrieved_documents:
                          - content: string
                            title: string
                            url: string
                            filepath: string
                            chunk_id: string
                            search_queries:
                              - string
                            data_source_index: 0
                            original_search_score: 0
                            rerank_score: 0
                            filter_reason: score
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      protected_material_text:
                        filtered: true
                        detected: true
                      protected_material_code:
                        filtered: true
                        detected: true
                        citation:
                          URL: string
                          license: string
                    logprobs:
                      content:
                        - token: string
                          logprob: 0
                          bytes:
                            - 0
                          top_logprobs:
                            - token: string
                              logprob: 0
                              bytes:
                                - 0
        '400':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                      indirect_attack:
                        filtered: true
                        detected: true
                  code: string
                  message: string
        '500':
          description: Service unavailable
          headers:
            apim-request-id:
              description: Request ID for troubleshooting purposes
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                      error:
                        code: string
                        message: string
                      jailbreak:
                        filtered: true
                        detected: true
                      indirect_attack:
                        filtered: true
                        detected: true
                  code: string
                  message: string
  '/deployments/{deployment-id}/audio/transcriptions':
    post:
      summary: Transcribes audio into the input language.
      description: Transcribes audio into the input language.
      operationId: Transcriptions_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the whisper model.
            example: whisper
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                prompt:
                  type: string
                response_format:
                  $ref: '#/components/schemas/audioResponseFormat'
                temperature:
                  type: number
                  default: 0
                language:
                  type: string
                'timestamp_granularities[]':
                  type: array
                  default: "[\n  \"segment\"\n]"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
              example:
                text: string
            text/plain:
              schema:
                type: string
                description: 'Transcribed text in the output format (when response_format was one of text, vtt or srt).'
              example: ''
  '/deployments/{deployment-id}/audio/translations':
    post:
      summary: Transcribes and translates input audio into English text.
      description: Transcribes and translates input audio into English text.
      operationId: Translations_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            type: string
            description: Deployment id of the whisper model which was deployed.
            example: whisper
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: string
                  format: binary
                prompt:
                  type: string
                response_format:
                  $ref: '#/components/schemas/audioResponseFormat'
                temperature:
                  type: number
                  default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/audioResponse'
                  - $ref: '#/components/schemas/audioVerboseResponse'
              example:
                text: string
            text/plain:
              schema:
                type: string
                description: 'Transcribed text in the output format (when response_format was one of text, vtt or srt).'
              example: ''
  '/deployments/{deployment-id}/audio/speech':
    post:
      summary: Generates audio from the input text.
      description: Generates audio from the input text.
      operationId: Speech_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            enum:
              - tts-hd
            type: string
            description: Deployment id of the tts model which was deployed.
            default: tts-hd
            example: tts-hd
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - 2024-05-01-preview
            type: string
            description: api version
            default: 2024-05-01-preview
            example: 2024-05-01-preview
      requestBody:
        content:
          multipart/form-data:
            example:
              model: tts-1-hd
              input: I'm excited to try text to speech.
              voice: nova
            schema:
              properties:
                input:
                  type: string
                voice:
                  enum:
                    - alloy
                    - echo
                    - fable
                    - onyx
                    - nova
                    - shimmer
                  type: string
                response_format:
                  enum:
                    - mp3
                    - opus
                    - aac
                    - flac
                    - wav
                    - pcm
                  type: string
                speed:
                  type: number
                  default: 1
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
              examples:
                default:
                  value: 
  '/deployments/{deployment-id}/images/generations':
    post:
      summary: Generates a batch of images from a text caption on a given DALLE model deployment
      description: Generates a batch of images from a text caption on a given DALLE model deployment
      operationId: ImageGenerations_Create
      parameters:
        - name: deployment-id
          in: path
          required: true
          schema:
            enum:
              - dall-e-3
            type: string
            description: Deployment id of the dalle model which was deployed.
            default: dall-e-3
            example: dalle-deployment
        - name: api-version
          in: query
          required: true
          schema:
            enum:
              - 2024-05-01-preview
            type: string
            description: api version
            default: 2024-05-01-preview
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/imageGenerationsRequest'
            example:
              prompt: a corgi in a field
              n: 1
              size: 1024x1024
              response_format: url
              user: user123456
              quality: standard
              style: vivid
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generateImagesResponse'
              example:
                created: '1676540381'
                data:
                  - url: https://www.contoso.com
                    b64_json: string
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                    revised_prompt: string
                    prompt_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
        '400':
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dalleErrorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                    revised_prompt: string
                  code: string
                  message: string
        '500':
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dalleErrorResponse'
              example:
                error:
                  param: string
                  type: string
                  inner_error:
                    code: ResponsibleAIPolicyViolation
                    content_filter_results:
                      sexual:
                        filtered: true
                        severity: safe
                      violence:
                        filtered: true
                        severity: safe
                      hate:
                        filtered: true
                        severity: safe
                      self_harm:
                        filtered: true
                        severity: safe
                      profanity:
                        filtered: true
                        detected: true
                      jailbreak:
                        filtered: true
                        detected: true
                      custom_blocklists:
                        filtered: true
                        details:
                          - filtered: true
                            id: string
                    revised_prompt: string
                  code: string
                  message: string
  /assistants:
    get:
      tags:
        - Assistants
      summary: Returns a list of assistants.
      description: Returns a list of assistants.
      operationId: List_Assistants
      parameters:
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListAssistantsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAssistantsResponse'
              example:
                object: list
                data:
                  - id: string
                    object: assistant
                    created_at: 0
                    name: string
                    description: string
                    model: string
                    instructions: string
                    tools:
                      - type: code_interpreter
                    tool_resources:
                      code_interpreter:
                        file_ids:
                          - string
                      file_search:
                        vector_store_ids:
                          - string
                    metadata: { }
                    temperature: 1
                    top_p: 1
                    response_format: { }
                first_id: asst_hLBK7PXBv5Lr2NQT7KLY0ag1
                last_id: asst_QLoItBbqwyAJEzlTy4y9kOMM
                has_more: false
    post:
      tags:
        - Assistants
      summary: Create an assistant with a model and instructions.
      description: Create an assistant with a model and instructions.
      operationId: Create_Assistant
      parameters:
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createAssistantRequest'
            example:
              model: { }
              name: string
              description: string
              instructions: string
              tools:
                - type: code_interpreter
              tool_resources:
                code_interpreter:
                  file_ids:
                    - string
                file_search:
                  vector_store_ids:
                    - string
                  vector_stores:
                    - file_ids:
                        - string
                      metadata: { }
              metadata: { }
              temperature: 1
              top_p: 1
              response_format: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assistantObject'
              example:
                id: string
                object: assistant
                created_at: 0
                name: string
                description: string
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
                temperature: 1
                top_p: 1
                response_format: { }
  '/assistants/{assistant_id}':
    get:
      tags:
        - Assistants
      summary: Retrieves an assistant.
      description: Retrieves an assistant.
      operationId: Get_Assistant
      parameters:
        - name: assistant_id
          in: path
          description: The ID of the assistant to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assistantObject'
              example:
                id: string
                object: assistant
                created_at: 0
                name: string
                description: string
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
                temperature: 1
                top_p: 1
                response_format: { }
    post:
      tags:
        - Assistant
      summary: Modifies an assistant.
      description: Modifies an assistant.
      operationId: Modify_Assistant
      parameters:
        - name: assistant_id
          in: path
          description: The ID of the assistant to modify.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifyAssistantRequest'
            example:
              model: { }
              name: string
              description: string
              instructions: string
              tools:
                - type: code_interpreter
              tool_resources:
                code_interpreter:
                  file_ids:
                    - string
                file_search:
                  vector_store_ids:
                    - string
              metadata: { }
              temperature: 1
              top_p: 1
              response_format: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/assistantObject'
              example:
                id: string
                object: assistant
                created_at: 0
                name: string
                description: string
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
                temperature: 1
                top_p: 1
                response_format: { }
    delete:
      tags:
        - Assistants
      summary: Delete an assistant.
      description: Delete an assistant.
      operationId: Delete_Assistant
      parameters:
        - name: assistant_id
          in: path
          description: The ID of the assistant to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteAssistantResponse'
              example:
                id: string
                deleted: true
                object: assistant.deleted
  /threads:
    post:
      tags:
        - Assistants
      summary: Create a thread.
      description: Create a thread.
      operationId: Create_Thread
      parameters:
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createThreadRequest'
            example:
              messages:
                - role: user
                  content: string
                  attachments:
                    - file_id: string
                      tools:
                        - type: code_interpreter
                  metadata: { }
              tool_resources:
                code_interpreter:
                  file_ids:
                    - string
                file_search:
                  vector_store_ids:
                    - string
                  vector_stores:
                    - file_ids:
                        - string
                      metadata: { }
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/threadObject'
              example:
                id: string
                object: thread
                created_at: 0
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
  '/threads/{thread_id}':
    get:
      tags:
        - Assistants
      summary: Retrieves a thread.
      description: Retrieves a thread.
      operationId: Get_Thread
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/threadObject'
              example:
                id: string
                object: thread
                created_at: 0
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
    post:
      tags:
        - Assistants
      summary: Modifies a thread.
      description: Modifies a thread.
      operationId: Modify_Thread
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to modify. Only the `metadata` can be modified.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifyThreadRequest'
            example:
              tool_resources:
                code_interpreter:
                  file_ids:
                    - string
                file_search:
                  vector_store_ids:
                    - string
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/threadObject'
              example:
                id: string
                object: thread
                created_at: 0
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                metadata: { }
    delete:
      tags:
        - Assistants
      summary: Delete a thread.
      description: Delete a thread.
      operationId: Delete_Thread
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteThreadResponse'
              example:
                id: string
                deleted: true
                object: thread.deleted
  '/threads/{thread_id}/messages':
    get:
      tags:
        - Assistants
      summary: Returns a list of messages for a given thread.
      description: Returns a list of messages for a given thread.
      operationId: List_Messages
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) the messages belong to.'
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListMessagesOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
        - name: run_id
          in: query
          description: "Filter messages by the run ID that generated them.\n"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMessagesResponse'
              example:
                object: list
                data:
                  - id: string
                    object: thread.message
                    created_at: 0
                    thread_id: string
                    status: in_progress
                    incomplete_details:
                      reason: content_filter
                    completed_at: 0
                    incomplete_at: 0
                    role: user
                    content:
                      - type: image_file
                        image_file:
                          file_id: string
                    assistant_id: string
                    run_id: string
                    attachments:
                      - file_id: string
                        tools:
                          - type: code_interpreter
                    metadata: { }
                first_id: msg_hLBK7PXBv5Lr2NQT7KLY0ag1
                last_id: msg_QLoItBbqwyAJEzlTy4y9kOMM
                has_more: false
    post:
      tags:
        - Assistants
      summary: Create a message.
      description: Create a message.
      operationId: Create_Message
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) to create a message for.'
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMessageRequest'
            example:
              role: user
              content: string
              attachments:
                - file_id: string
                  tools:
                    - type: code_interpreter
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageObject'
              example:
                id: string
                object: thread.message
                created_at: 0
                thread_id: string
                status: in_progress
                incomplete_details:
                  reason: content_filter
                completed_at: 0
                incomplete_at: 0
                role: user
                content:
                  - type: image_file
                    image_file:
                      file_id: string
                assistant_id: string
                run_id: string
                attachments:
                  - file_id: string
                    tools:
                      - type: code_interpreter
                metadata: { }
  '/threads/{thread_id}/messages/{message_id}':
    get:
      tags:
        - Assistants
      summary: Retrieve a message.
      description: Retrieve a message.
      operationId: Get_Message
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) to which this message belongs.'
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          description: The ID of the message to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageObject'
              example:
                id: string
                object: thread.message
                created_at: 0
                thread_id: string
                status: in_progress
                incomplete_details:
                  reason: content_filter
                completed_at: 0
                incomplete_at: 0
                role: user
                content:
                  - type: image_file
                    image_file:
                      file_id: string
                assistant_id: string
                run_id: string
                attachments:
                  - file_id: string
                    tools:
                      - type: code_interpreter
                metadata: { }
    post:
      tags:
        - Assistants
      summary: Modifies a message.
      description: Modifies a message.
      operationId: Modify_Message
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to which this message belongs.
          required: true
          schema:
            type: string
        - name: message_id
          in: path
          description: The ID of the message to modify.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifyMessageRequest'
            example:
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageObject'
              example:
                id: string
                object: thread.message
                created_at: 0
                thread_id: string
                status: in_progress
                incomplete_details:
                  reason: content_filter
                completed_at: 0
                incomplete_at: 0
                role: user
                content:
                  - type: image_file
                    image_file:
                      file_id: string
                assistant_id: string
                run_id: string
                attachments:
                  - file_id: string
                    tools:
                      - type: code_interpreter
                metadata: { }
  /threads/runs:
    post:
      tags:
        - Assistants
      summary: Create a thread and run it in one request.
      description: Create a thread and run it in one request.
      operationId: Create_Thread_And_Run
      parameters:
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createThreadAndRunRequest'
            example:
              assistant_id: string
              thread:
                messages:
                  - role: user
                    content: string
                    attachments:
                      - file_id: string
                        tools:
                          - type: code_interpreter
                    metadata: { }
                tool_resources:
                  code_interpreter:
                    file_ids:
                      - string
                  file_search:
                    vector_store_ids:
                      - string
                    vector_stores:
                      - file_ids:
                          - string
                        metadata: { }
                metadata: { }
              model: string
              instructions: string
              tools:
                - type: code_interpreter
              tool_resources:
                code_interpreter:
                  file_ids:
                    - string
                file_search:
                  vector_store_ids:
                    - string
              metadata: { }
              temperature: 1
              top_p: 1
              stream: true
              max_prompt_tokens: 0
              max_completion_tokens: 0
              truncation_strategy:
                type: auto
                last_messages: 0
              tool_choice: { }
              response_format: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
  '/threads/{thread_id}/runs':
    get:
      tags:
        - Assistants
      summary: Returns a list of runs belonging to a thread.
      description: Returns a list of runs belonging to a thread.
      operationId: List_Runs
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread the run belongs to.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListRunsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRunsResponse'
              example:
                object: list
                data:
                  - id: string
                    object: thread.run
                    created_at: 0
                    thread_id: string
                    assistant_id: string
                    status: queued
                    required_action:
                      type: submit_tool_outputs
                      submit_tool_outputs:
                        tool_calls:
                          - id: string
                            type: function
                            function:
                              name: string
                              arguments: string
                    last_error:
                      code: server_error
                      message: string
                    expires_at: 0
                    started_at: 0
                    cancelled_at: 0
                    failed_at: 0
                    completed_at: 0
                    incomplete_details:
                      reason: max_completion_tokens
                    model: string
                    instructions: string
                    tools:
                      - type: code_interpreter
                    metadata: { }
                    usage:
                      completion_tokens: 0
                      prompt_tokens: 0
                      total_tokens: 0
                    temperature: 0
                    top_p: 0
                    max_prompt_tokens: 0
                    max_completion_tokens: 0
                    truncation_strategy:
                      type: auto
                      last_messages: 0
                    tool_choice: { }
                    response_format: { }
                first_id: run_hLBK7PXBv5Lr2NQT7KLY0ag1
                last_id: run_QLoItBbqwyAJEzlTy4y9kOMM
                has_more: false
    post:
      tags:
        - Assistants
      summary: Create a run.
      description: Create a run.
      operationId: Create_Run
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to run.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRunRequest'
            example:
              assistant_id: string
              model: string
              instructions: string
              additional_instructions: string
              additional_messages:
                - role: user
                  content: string
                  attachments:
                    - file_id: string
                      tools:
                        - type: code_interpreter
                  metadata: { }
              tools:
                - type: code_interpreter
              metadata: { }
              temperature: 1
              top_p: 1
              stream: true
              max_prompt_tokens: 0
              max_completion_tokens: 0
              truncation_strategy:
                type: auto
                last_messages: 0
              tool_choice: { }
              response_format: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
  '/threads/{thread_id}/runs/{run_id}':
    get:
      tags:
        - Assistants
      summary: Retrieves a run.
      description: Retrieves a run.
      operationId: Get_Run
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) that was run.'
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
    post:
      tags:
        - Assistants
      summary: Modifies a run.
      description: Modifies a run.
      operationId: Modify_Run
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) that was run.'
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run to modify.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/modifyRunRequest'
            example:
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
  '/threads/{thread_id}/runs/{run_id}/submit_tool_outputs':
    post:
      tags:
        - Assistants
      summary: "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n"
      description: "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n"
      operationId: Submit_Tool_Outputs_To_Run
      parameters:
        - name: thread_id
          in: path
          description: 'The ID of the [thread](/docs/api-reference/threads) to which this run belongs.'
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run that requires the tool output submission.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          required: true
          schema:
            type: string
            description: api version
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitToolOutputsRunRequest'
            example:
              tool_outputs:
                - tool_call_id: string
                  output: string
              stream: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
  '/threads/{thread_id}/runs/{run_id}/cancel':
    post:
      tags:
        - Assistants
      summary: Cancels a run that is `in_progress`.
      description: Cancels a run that is `in_progress`.
      operationId: Cancel_Run
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to which this run belongs.
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run to cancel.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
              example:
                id: string
                object: thread.run
                created_at: 0
                thread_id: string
                assistant_id: string
                status: queued
                required_action:
                  type: submit_tool_outputs
                  submit_tool_outputs:
                    tool_calls:
                      - id: string
                        type: function
                        function:
                          name: string
                          arguments: string
                last_error:
                  code: server_error
                  message: string
                expires_at: 0
                started_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                incomplete_details:
                  reason: max_completion_tokens
                model: string
                instructions: string
                tools:
                  - type: code_interpreter
                metadata: { }
                usage:
                  completion_tokens: 0
                  prompt_tokens: 0
                  total_tokens: 0
                temperature: 0
                top_p: 0
                max_prompt_tokens: 0
                max_completion_tokens: 0
                truncation_strategy:
                  type: auto
                  last_messages: 0
                tool_choice: { }
                response_format: { }
  '/threads/{thread_id}/runs/{run_id}/steps':
    get:
      tags:
        - Assistants
      summary: Returns a list of run steps belonging to a run.
      description: Returns a list of run steps belonging to a run.
      operationId: List_Run_Steps
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread the run and run steps belong to.
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run the run steps belong to.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListRunStepsOrder
              modelAsString: true
              values:
                - value: asc
                  description: Order results in ascending order
                - value: desc
                  description: Order results in descending order
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRunStepsResponse'
              example:
                object: list
                data:
                  - id: string
                    object: assistant.run.step
                    created_at: 0
                    assistant_id: string
                    thread_id: string
                    run_id: string
                    type: message_creation
                    status: in_progress
                    step_details:
                      type: message_creation
                      message_creation:
                        message_id: string
                    last_error:
                      code: server_error
                      message: string
                    expired_at: 0
                    cancelled_at: 0
                    failed_at: 0
                    completed_at: 0
                    metadata: { }
                first_id: step_hLBK7PXBv5Lr2NQT7KLY0ag1
                last_id: step_QLoItBbqwyAJEzlTy4y9kOMM
                has_more: false
  '/threads/{thread_id}/runs/{run_id}/steps/{step_id}':
    get:
      tags:
        - Assistants
      summary: Retrieves a run step.
      description: Retrieves a run step.
      operationId: Get_Run_Step
      parameters:
        - name: thread_id
          in: path
          description: The ID of the thread to which the run and run step belongs.
          required: true
          schema:
            type: string
        - name: run_id
          in: path
          description: The ID of the run to which the run step belongs.
          required: true
          schema:
            type: string
        - name: step_id
          in: path
          description: The ID of the run step to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runStepObject'
              example:
                id: string
                object: assistant.run.step
                created_at: 0
                assistant_id: string
                thread_id: string
                run_id: string
                type: message_creation
                status: in_progress
                step_details:
                  type: message_creation
                  message_creation:
                    message_id: string
                last_error:
                  code: server_error
                  message: string
                expired_at: 0
                cancelled_at: 0
                failed_at: 0
                completed_at: 0
                metadata: { }
  /vector_stores:
    get:
      tags:
        - Vector Stores
      summary: Returns a list of vector stores.
      description: Returns a list of vector stores.
      operationId: List_Vector_Stores
      parameters:
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListVectorStoresOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVectorStoresResponse'
              example:
                object: list
                data:
                  - id: string
                    object: vector_store
                    created_at: 0
                    name: string
                    usage_bytes: 0
                    file_counts:
                      in_progress: 0
                      completed: 0
                      failed: 0
                      cancelled: 0
                      total: 0
                    status: expired
                    expires_after:
                      anchor: last_active_at
                      days: 0
                    expires_at: 0
                    last_active_at: 0
                    metadata: { }
                first_id: vs_abc123
                last_id: vs_abc456
                has_more: false
    post:
      tags:
        - Vector Stores
      summary: Create a vector store.
      description: Create a vector store.
      operationId: Create_Vector_Store
      parameters:
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVectorStoreRequest'
            example:
              file_ids:
                - string
              name: string
              expires_after:
                anchor: last_active_at
                days: 0
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreObject'
              example:
                id: string
                object: vector_store
                created_at: 0
                name: string
                usage_bytes: 0
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
                status: expired
                expires_after:
                  anchor: last_active_at
                  days: 0
                expires_at: 0
                last_active_at: 0
                metadata: { }
  '/vector_stores/{vector_store_id}':
    get:
      tags:
        - Vector Stores
      summary: Retrieves a vector store.
      description: Retrieves a vector store.
      operationId: Get_Vector_Store
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store to retrieve.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreObject'
              example:
                id: string
                object: vector_store
                created_at: 0
                name: string
                usage_bytes: 0
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
                status: expired
                expires_after:
                  anchor: last_active_at
                  days: 0
                expires_at: 0
                last_active_at: 0
                metadata: { }
    post:
      tags:
        - Vector Stores
      summary: Modifies a vector store.
      description: Modifies a vector store.
      operationId: Modify_Vector_Store
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store to modify.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateVectorStoreRequest'
            example:
              name: string
              expires_after:
                anchor: last_active_at
                days: 0
              metadata: { }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreObject'
              example:
                id: string
                object: vector_store
                created_at: 0
                name: string
                usage_bytes: 0
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
                status: expired
                expires_after:
                  anchor: last_active_at
                  days: 0
                expires_at: 0
                last_active_at: 0
                metadata: { }
    delete:
      tags:
        - Vector Stores
      summary: Delete a vector store.
      description: Delete a vector store.
      operationId: Delete_Vector_Store
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteVectorStoreResponse'
              example:
                id: string
                deleted: true
                object: vector_store.deleted
  '/vector_stores/{vector_store_id}/files':
    get:
      tags:
        - Vector Stores
      summary: Returns a list of vector store files.
      description: Returns a list of vector store files.
      operationId: List_Vector_Store_Files
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the files belong to.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListVectorStoreFilesOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
        - name: filter
          in: query
          description: 'Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.'
          schema:
            enum:
              - in_progress
              - completed
              - failed
              - cancelled
            type: string
            x-ms-enum:
              name: ListVectorStoreFilesFilter
              modelAsString: true
              values:
                - value: in_progress
                - value: completed
                - value: failed
                - value: cancelled
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVectorStoreFilesResponse'
              example:
                object: list
                data:
                  - id: string
                    object: vector_store.file
                    usage_bytes: 0
                    created_at: 0
                    vector_store_id: string
                    status: in_progress
                    last_error:
                      code: internal_error
                      message: string
                first_id: file-abc123
                last_id: file-abc456
                has_more: false
    post:
      tags:
        - Vector Stores
      summary: 'Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).'
      description: 'Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).'
      operationId: Create_Vector_Store_File
      parameters:
        - name: vector_store_id
          in: path
          description: "The ID of the vector store for which to create a File.\n"
          required: true
          schema:
            type: string
            example: vs_abc123
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVectorStoreFileRequest'
            example:
              file_id: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileObject'
              example:
                id: string
                object: vector_store.file
                usage_bytes: 0
                created_at: 0
                vector_store_id: string
                status: in_progress
                last_error:
                  code: internal_error
                  message: string
  '/vector_stores/{vector_store_id}/files/{file_id}':
    get:
      tags:
        - Vector Stores
      summary: Retrieves a vector store file.
      description: Retrieves a vector store file.
      operationId: Get_Vector_Store_File
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the file belongs to.
          required: true
          schema:
            type: string
            example: vs_abc123
        - name: file_id
          in: path
          description: The ID of the file being retrieved.
          required: true
          schema:
            type: string
            example: file-abc123
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileObject'
              example:
                id: string
                object: vector_store.file
                usage_bytes: 0
                created_at: 0
                vector_store_id: string
                status: in_progress
                last_error:
                  code: internal_error
                  message: string
    delete:
      tags:
        - Vector Stores
      summary: 'Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.'
      description: 'Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.'
      operationId: Delete_Vector_Store_File
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the file belongs to.
          required: true
          schema:
            type: string
        - name: file_id
          in: path
          description: The ID of the file to delete.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteVectorStoreFileResponse'
              example:
                id: string
                deleted: true
                object: vector_store.file.deleted
  '/vector_stores/{vector_store_id}/file_batches':
    post:
      tags:
        - Vector Stores
      summary: Create a vector store file batch.
      description: Create a vector store file batch.
      operationId: Create_Vector_Store_File_Batch
      parameters:
        - name: vector_store_id
          in: path
          description: "The ID of the vector store for which to create a File Batch.\n"
          required: true
          schema:
            type: string
            example: vs_abc123
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVectorStoreFileBatchRequest'
            example:
              file_ids:
                - string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileBatchObject'
              example:
                id: string
                object: vector_store.files_batch
                created_at: 0
                vector_store_id: string
                status: in_progress
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
  '/vector_stores/{vector_store_id}/file_batches/{batch_id}':
    get:
      tags:
        - Vector Stores
      summary: Retrieves a vector store file batch.
      description: Retrieves a vector store file batch.
      operationId: Get_Vector_Store_File_Batch
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the file batch belongs to.
          required: true
          schema:
            type: string
            example: vs_abc123
        - name: batch_id
          in: path
          description: The ID of the file batch being retrieved.
          required: true
          schema:
            type: string
            example: vsfb_abc123
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileBatchObject'
              example:
                id: string
                object: vector_store.files_batch
                created_at: 0
                vector_store_id: string
                status: in_progress
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
  '/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel':
    post:
      tags:
        - Vector Stores
      summary: Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
      description: Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
      operationId: Cancel_Vector_Store_File_Batch
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the file batch belongs to.
          required: true
          schema:
            type: string
        - name: batch_id
          in: path
          description: The ID of the file batch to cancel.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileBatchObject'
              example:
                id: string
                object: vector_store.files_batch
                created_at: 0
                vector_store_id: string
                status: in_progress
                file_counts:
                  in_progress: 0
                  completed: 0
                  failed: 0
                  cancelled: 0
                  total: 0
  '/vector_stores/{vector_store_id}/file_batches/{batch_id}/files':
    get:
      tags:
        - Vector Stores
      summary: Returns a list of vector store files in a batch.
      description: Returns a list of vector store files in a batch.
      operationId: List_Vector_Store_File_Batch_Files
      parameters:
        - name: vector_store_id
          in: path
          description: The ID of the vector store that the files belong to.
          required: true
          schema:
            type: string
        - name: batch_id
          in: path
          description: The ID of the file batch that the files belong to.
          required: true
          schema:
            type: string
        - name: api-version
          in: query
          description: api version
          required: true
          schema:
            type: string
            example: 2024-05-01-preview
        - name: limit
          in: query
          description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          schema:
            type: integer
            default: 20
        - name: order
          in: query
          description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          schema:
            enum:
              - asc
              - desc
            type: string
            default: desc
            x-ms-enum:
              name: ListVectorStoreFilesOrder
              modelAsString: true
              values:
                - value: asc
                - value: desc
        - name: after
          in: query
          description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          schema:
            type: string
        - name: before
          in: query
          description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          schema:
            type: string
        - name: filter
          in: query
          description: 'Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.'
          schema:
            enum:
              - in_progress
              - completed
              - failed
              - cancelled
            type: string
            x-ms-enum:
              name: ListVectorStoreFilesFilter
              modelAsString: true
              values:
                - value: in_progress
                - value: completed
                - value: failed
                - value: cancelled
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVectorStoreFilesResponse'
              example:
                object: list
                data:
                  - id: string
                    object: vector_store.file
                    usage_bytes: 0
                    created_at: 0
                    vector_store_id: string
                    status: in_progress
                    last_error:
                      code: internal_error
                      message: string
                first_id: file-abc123
                last_id: file-abc456
                has_more: false
components:
  schemas:
    errorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/error'
    errorBase:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    error:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/innerError'
    innerError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
      description: Inner error with additional details.
    innerErrorCode:
      enum:
        - ResponsibleAIPolicyViolation
      type: string
      description: Error codes for the inner error object.
      x-ms-enum:
        name: InnerErrorCode
        modelAsString: true
        values:
          - value: ResponsibleAIPolicyViolation
            description: The prompt violated one of more content filter rules.
    dalleErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/dalleError'
    dalleError:
      type: object
      allOf:
        - $ref: '#/components/schemas/errorBase'
      properties:
        param:
          type: string
        type:
          type: string
        inner_error:
          $ref: '#/components/schemas/dalleInnerError'
    dalleInnerError:
      type: object
      properties:
        code:
          $ref: '#/components/schemas/innerErrorCode'
        content_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
        revised_prompt:
          type: string
          description: 'The prompt that was used to generate the image, if there was any revision to the prompt.'
      description: Inner error with additional details.
    contentFilterResultBase:
      required:
        - filtered
      type: object
      properties:
        filtered:
          type: boolean
    contentFilterSeverityResult:
      required:
        - severity
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            severity:
              enum:
                - safe
                - low
                - medium
                - high
              type: string
              x-ms-enum:
                name: ContentFilterSeverity
                modelAsString: true
                values:
                  - value: safe
                    description: General content or related content in generic or non-harmful contexts.
                  - value: low
                    description: Harmful content at a low intensity and risk level.
                  - value: medium
                    description: Harmful content at a medium intensity and risk level.
                  - value: high
                    description: Harmful content at a high intensity and risk level.
    contentFilterDetectedResult:
      required:
        - detected
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            detected:
              type: boolean
    contentFilterDetectedWithCitationResult:
      required:
        - detected
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            citation:
              type: object
              properties:
                URL:
                  type: string
                license:
                  type: string
    contentFilterIdResult:
      required:
        - id
        - filtered
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            id:
              type: string
    contentFilterResultsBase:
      type: object
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        profanity:
          $ref: '#/components/schemas/contentFilterDetectedResult'
        custom_blocklists:
          $ref: '#/components/schemas/contentFilterDetailedResults'
        error:
          $ref: '#/components/schemas/errorBase'
      description: Information about the content filtering results.
    contentFilterPromptResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
            indirect_attack:
              $ref: '#/components/schemas/contentFilterDetectedResult'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    contentFilterChoiceResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultsBase'
        - properties:
            protected_material_text:
              $ref: '#/components/schemas/contentFilterDetectedResult'
        - properties:
            protected_material_code:
              $ref: '#/components/schemas/contentFilterDetectedWithCitationResult'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    contentFilterDetailedResults:
      required:
        - filtered
        - details
      type: object
      allOf:
        - $ref: '#/components/schemas/contentFilterResultBase'
        - properties:
            details:
              type: array
              items:
                $ref: '#/components/schemas/contentFilterIdResult'
      description: Content filtering results with a detail of content filter ids for the filtered segments.
    promptFilterResult:
      type: object
      properties:
        prompt_index:
          type: integer
        content_filter_results:
          $ref: '#/components/schemas/contentFilterPromptResults'
      description: Content filtering results for a single prompt in the request.
    promptFilterResults:
      type: array
      items:
        $ref: '#/components/schemas/promptFilterResult'
      description: 'Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders.'
    dalleContentFilterResults:
      type: object
      properties:
        sexual:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        violence:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        hate:
          $ref: '#/components/schemas/contentFilterSeverityResult'
        self_harm:
          $ref: '#/components/schemas/contentFilterSeverityResult'
      description: Information about the content filtering results.
    dalleFilterResults:
      type: object
      allOf:
        - $ref: '#/components/schemas/dalleContentFilterResults'
        - properties:
            profanity:
              $ref: '#/components/schemas/contentFilterDetectedResult'
            jailbreak:
              $ref: '#/components/schemas/contentFilterDetectedResult'
            custom_blocklists:
              $ref: '#/components/schemas/contentFilterDetailedResults'
      description: 'Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id.'
    chatCompletionsRequestCommon:
      type: object
      properties:
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both."
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both."
          default: 1
          nullable: true
          example: 1
        stream:
          type: boolean
          description: 'If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.'
          default: false
          nullable: true
        stop:
          oneOf:
            - type: string
              nullable: true
            - maxItems: 4
              minItems: 1
              type: array
              items:
                type: string
              description: Array minimum size of 1 and maximum of 4
          description: Up to 4 sequences where the API will stop generating further tokens.
          default: ''
        max_tokens:
          type: integer
          description: 'The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).'
          default: 4096
        presence_penalty:
          maximum: 2.0
          minimum: -2.0
          type: number
          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model''s likelihood to talk about new topics.'
          default: 0
        frequency_penalty:
          maximum: 2.0
          minimum: -2.0
          type: number
          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model''s likelihood to repeat the same line verbatim.'
          default: 0
        logit_bias:
          type: object
          description: 'Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.'
          nullable: true
        user:
          type: string
          description: 'A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.'
          example: user-1234
    createChatCompletionRequest:
      required:
        - messages
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsRequestCommon'
        - properties:
            messages:
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionRequestMessage'
              description: 'A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb).'
            data_sources:
              type: array
              items:
                $ref: '#/components/schemas/azureChatExtensionConfiguration'
              description: "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI."
            n:
              maximum: 128.0
              minimum: 1.0
              type: integer
              description: How many chat completion choices to generate for each input message.
              default: 1
              nullable: true
              example: 1
            seed:
              maximum: 9223372036854775800
              minimum: -9223372036854775800
              type: integer
              description: 'If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.'
              default: 0
              nullable: true
              example: 1
            logprobs:
              type: boolean
              description: 'Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.'
              default: false
              nullable: true
            top_logprobs:
              maximum: 5.0
              minimum: 0.0
              type: integer
              description: 'An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.'
              nullable: true
            response_format:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/chatCompletionResponseFormat'
              description: An object specifying the format that the model must output. Used to enable JSON mode.
            tools:
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionTool'
              description: 'A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.'
            tool_choice:
              $ref: '#/components/schemas/chatCompletionToolChoiceOption'
            functions:
              maxItems: 128
              minItems: 1
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionFunction'
              description: Deprecated in favor of `tools`. A list of functions the model may generate JSON inputs for.
            function_call:
              oneOf:
                - enum:
                    - none
                    - auto
                  type: string
                  description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
                - required:
                    - name
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the function to call.
                  description: 'Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.'
              description: 'Deprecated in favor of `tool_choice`. Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function.  Specifying a particular function via `{"name":\ "my_function"}` forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.'
    chatCompletionResponseFormat:
      enum:
        - text
        - json_object
      type: string
      description: Setting to `json_object` enables JSON mode. This guarantees that the message the model generates is valid JSON.
      default: text
      nullable: true
      example: json_object
      x-ms-enum:
        name: ChatCompletionResponseFormat
        modelAsString: true
        values:
          - value: text
            description: Response format is a plain text string.
          - value: json_object
            description: Response format is a JSON object.
    chatCompletionFunction:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
        description:
          type: string
          description: The description of what the function does.
        parameters:
          $ref: '#/components/schemas/chatCompletionFunctionParameters'
    chatCompletionFunctionParameters:
      type: object
      description: 'The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.'
    chatCompletionRequestMessage:
      required:
        - role
      type: object
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionRequestMessageRole'
      discriminator:
        propertyName: role
        mapping:
          system: '#/components/schemas/chatCompletionRequestMessageSystem'
          user: '#/components/schemas/chatCompletionRequestMessageUser'
          assistant: '#/components/schemas/chatCompletionRequestMessageAssistant'
          tool: '#/components/schemas/chatCompletionRequestMessageTool'
          function: '#/components/schemas/chatCompletionRequestMessageFunction'
    chatCompletionRequestMessageRole:
      enum:
        - system
        - user
        - assistant
        - tool
        - function
      type: string
      description: The role of the messages author.
      x-ms-enum:
        name: ChatCompletionRequestMessageRole
        modelAsString: true
        values:
          - value: system
            description: The message author role is system.
          - value: user
            description: The message author role is user.
          - value: assistant
            description: The message author role is assistant.
          - value: tool
            description: The message author role is tool.
          - value: function
            description: Deprecated. The message author role is function.
    chatCompletionRequestMessageSystem:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
    chatCompletionRequestMessageUser:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              oneOf:
                - type: string
                  description: The contents of the message.
                - minimum: 1.0
                  type: array
                  items:
                    $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
                  description: 'An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4-visual-preview` model.'
              nullable: true
    chatCompletionRequestMessageContentPart:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionRequestMessageContentPartType'
      discriminator:
        propertyName: type
        mapping:
          text: '#/components/schemas/chatCompletionRequestMessageContentPartText'
          image_url: '#/components/schemas/chatCompletionRequestMessageContentPartImage'
    chatCompletionRequestMessageContentPartType:
      enum:
        - text
        - image_url
      type: string
      description: The type of the content part.
      x-ms-enum:
        name: ChatCompletionRequestMessageContentPartType
        modelAsString: true
        values:
          - value: text
            description: The content part type is text.
          - value: image_url
            description: The content part type is image_url.
    chatCompletionRequestMessageContentPartText:
      required:
        - text
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            text:
              type: string
              description: The text content.
    chatCompletionRequestMessageContentPartImage:
      required:
        - url
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessageContentPart'
        - type: object
          properties:
            url:
              type: string
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
            detail:
              $ref: '#/components/schemas/imageDetailLevel'
    imageDetailLevel:
      enum:
        - auto
        - low
        - high
      type: string
      description: Specifies the detail level of the image.
      default: auto
      x-ms-enum:
        name: ImageDetailLevel
        modelAsString: true
        values:
          - value: auto
            description: The image detail level is auto.
          - value: low
            description: The image detail level is low.
          - value: high
            description: The image detail level is high.
    chatCompletionRequestMessageAssistant:
      required:
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            content:
              type: string
              description: The contents of the message.
              nullable: true
            tool_calls:
              type: array
              items:
                $ref: '#/components/schemas/chatCompletionMessageToolCall'
              description: 'The tool calls generated by the model, such as function calls.'
            context:
              $ref: '#/components/schemas/azureChatExtensionsMessageContext'
    azureChatExtensionConfiguration:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/azureChatExtensionType'
      description: "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI."
      discriminator:
        propertyName: type
        mapping:
          azure_search: '#/components/schemas/azureSearchChatExtensionConfiguration'
          azure_ml_index: '#/components/schemas/azureMachineLearningIndexChatExtensionConfiguration'
          azure_cosmos_db: '#/components/schemas/azureCosmosDBChatExtensionConfiguration'
          elasticsearch: '#/components/schemas/elasticsearchChatExtensionConfiguration'
          pinecone: '#/components/schemas/pineconeChatExtensionConfiguration'
    azureChatExtensionType:
      enum:
        - azure_search
        - azure_ml_index
        - azure_cosmos_db
        - elasticsearch
        - pinecone
      type: string
      description: "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI."
      x-ms-enum:
        name: AzureChatExtensionType
        modelAsString: true
        values:
          - name: azureSearch
            value: azure_search
            description: Represents the use of Azure Search as an Azure OpenAI chat extension.
          - name: azureMachineLearningIndex
            value: azure_ml_index
            description: Represents the use of Azure Machine Learning index as an Azure OpenAI chat extension.
          - name: azureCosmosDB
            value: azure_cosmos_db
            description: Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension.
          - name: elasticsearch
            value: elasticsearch
            description: Represents the use of Elasticsearch® index as an Azure OpenAI chat extension.
          - name: pinecone
            value: pinecone
            description: Represents the use of Pinecone index as an Azure OpenAI chat extension.
    azureSearchChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureSearchChatExtensionParameters'
      description: "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: azure_search
    azureSearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataAccessTokenAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: 'The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.'
          format: int32
        allow_partial_result:
          type: boolean
          description: 'If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.'
          default: false
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        endpoint:
          type: string
          description: The absolute endpoint path for the Azure Search resource to use.
          format: uri
        index_name:
          type: string
          description: The name of the index to use as available in the referenced Azure Search resource.
        fields_mapping:
          $ref: '#/components/schemas/azureSearchIndexFieldMappingOptions'
        query_type:
          $ref: '#/components/schemas/azureSearchQueryType'
        semantic_configuration:
          type: string
          description: The additional semantic configuration for the query.
        filter:
          type: string
          description: Search filter.
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
        include_contexts:
          type: array
          items:
            $ref: '#/components/schemas/onYourDataContextProperty'
          description: 'The included properties of the output context. If not specified, the default value is `citations` and `intent`.'
      description: Parameters for Azure Search when used as an Azure OpenAI chat extension.
    azureSearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent vector data.
        image_vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent image vector data.
      description: Optional settings to control how fields are processed when using a configured Azure Search resource.
    azureSearchQueryType:
      enum:
        - simple
        - semantic
        - vector
        - vector_simple_hybrid
        - vector_semantic_hybrid
      type: string
      description: The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      x-ms-enum:
        name: AzureSearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: 'Represents the default, simple query parser.'
          - name: semantic
            value: semantic
            description: Represents the semantic query parser for advanced semantic modeling.
          - name: vector
            value: vector
            description: Represents vector search over computed data.
          - name: vectorSimpleHybrid
            value: vector_simple_hybrid
            description: Represents a combination of the simple query strategy with vector data.
          - name: vectorSemanticHybrid
            value: vector_semantic_hybrid
            description: Represents a combination of semantic search and vector data querying.
    azureMachineLearningIndexChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureMachineLearningIndexChatExtensionParameters'
      description: "A specific representation of configurable options for Azure Machine Learning vector index when using it as an Azure\nOpenAI chat extension."
      x-ms-discriminator-value: azure_ml_index
    azureMachineLearningIndexChatExtensionParameters:
      required:
        - authentication
        - name
        - project_resource_id
        - version
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: '#/components/schemas/onYourDataAccessTokenAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: 'The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.'
          format: int32
        allow_partial_result:
          type: boolean
          description: 'If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.'
          default: false
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        project_resource_id:
          type: string
          description: The resource ID of the Azure Machine Learning project.
        name:
          type: string
          description: The Azure Machine Learning vector index name.
        version:
          type: string
          description: The version of the Azure Machine Learning vector index.
        filter:
          type: string
          description: Search filter. Only supported if the Azure Machine Learning vector index is of type AzureSearch.
        include_contexts:
          type: array
          items:
            $ref: '#/components/schemas/onYourDataContextProperty'
          description: 'The included properties of the output context. If not specified, the default value is `citations` and `intent`.'
      description: Parameters for the Azure Machine Learning vector index chat extension.
    azureCosmosDBChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/azureCosmosDBChatExtensionParameters'
      description: "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: azure_cosmos_db
    azureCosmosDBChatExtensionParameters:
      required:
        - authentication
        - container_name
        - database_name
        - embedding_dependency
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: 'The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.'
          format: int32
        allow_partial_result:
          type: boolean
          description: 'If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.'
          default: false
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        database_name:
          type: string
          description: The MongoDB vCore database name to use with Azure Cosmos DB.
        container_name:
          type: string
          description: The name of the Azure Cosmos DB resource container.
        index_name:
          type: string
          description: The MongoDB vCore index name to use with Azure Cosmos DB.
        fields_mapping:
          $ref: '#/components/schemas/azureCosmosDBFieldMappingOptions'
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
        include_contexts:
          type: array
          items:
            $ref: '#/components/schemas/onYourDataContextProperty'
          description: 'The included properties of the output context. If not specified, the default value is `citations` and `intent`.'
      description: "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore."
    azureCosmosDBFieldMappingOptions:
      required:
        - content_fields
        - vector_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent vector data.
      description: Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource.
    elasticsearchChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/elasticsearchChatExtensionParameters'
      description: "A specific representation of configurable options for Elasticsearch when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: elasticsearch
    elasticsearchChatExtensionParameters:
      required:
        - authentication
        - endpoint
        - index_name
      type: object
      properties:
        authentication:
          oneOf:
            - $ref: '#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions'
            - $ref: '#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: 'The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.'
          format: int32
        allow_partial_result:
          type: boolean
          description: 'If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.'
          default: false
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        endpoint:
          type: string
          description: The endpoint of Elasticsearch®.
          format: uri
        index_name:
          type: string
          description: The index name of Elasticsearch®.
        fields_mapping:
          $ref: '#/components/schemas/elasticsearchIndexFieldMappingOptions'
        query_type:
          $ref: '#/components/schemas/elasticsearchQueryType'
        embedding_dependency:
          oneOf:
            - $ref: '#/components/schemas/onYourDataEndpointVectorizationSource'
            - $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
            - $ref: '#/components/schemas/onYourDataModelIdVectorizationSource'
        include_contexts:
          type: array
          items:
            $ref: '#/components/schemas/onYourDataContextProperty'
          description: 'The included properties of the output context. If not specified, the default value is `citations` and `intent`.'
      description: 'Parameters to use when configuring Elasticsearch® as an Azure OpenAI chat extension. '
    elasticsearchIndexFieldMappingOptions:
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
        vector_fields:
          type: array
          items:
            type: string
          description: The names of fields that represent vector data.
      description: Optional settings to control how fields are processed when using a configured Elasticsearch® resource.
    elasticsearchQueryType:
      enum:
        - simple
        - vector
      type: string
      description: The type of Elasticsearch® retrieval query that should be executed when using it as an Azure OpenAI chat extension.
      x-ms-enum:
        name: ElasticsearchQueryType
        modelAsString: true
        values:
          - name: simple
            value: simple
            description: 'Represents the default, simple query parser.'
          - name: vector
            value: vector
            description: Represents vector search over computed data.
    pineconeChatExtensionConfiguration:
      required:
        - parameters
      allOf:
        - $ref: '#/components/schemas/azureChatExtensionConfiguration'
        - properties:
            parameters:
              $ref: '#/components/schemas/pineconeChatExtensionParameters'
      description: "A specific representation of configurable options for Pinecone when using it as an Azure OpenAI chat\nextension."
      x-ms-discriminator-value: pinecone
    pineconeChatExtensionParameters:
      required:
        - authentication
        - embedding_dependency
        - environment
        - fields_mapping
        - index_name
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
        top_n_documents:
          type: integer
          description: The configured top number of documents to feature for the configured query.
          format: int32
        max_search_queries:
          type: integer
          description: 'The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.'
          format: int32
        allow_partial_result:
          type: boolean
          description: 'If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.'
          default: false
        in_scope:
          type: boolean
          description: Whether queries should be restricted to use of indexed data.
        strictness:
          maximum: 5.0
          minimum: 1.0
          type: integer
          description: 'The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.'
          format: int32
        role_information:
          type: string
          description: 'Give the model instructions about how it should behave and any context it should reference when generating a response. You can describe the assistant''s personality and tell it how to format responses. There''s a 100 token limit for it, and it counts against the overall token limit.'
        environment:
          type: string
          description: The environment name of Pinecone.
        index_name:
          type: string
          description: The name of the Pinecone database index.
        fields_mapping:
          $ref: '#/components/schemas/pineconeFieldMappingOptions'
        embedding_dependency:
          $ref: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
        include_contexts:
          type: array
          items:
            $ref: '#/components/schemas/onYourDataContextProperty'
          description: 'The included properties of the output context. If not specified, the default value is `citations` and `intent`.'
      description: Parameters for configuring Azure OpenAI Pinecone chat extensions.
    pineconeFieldMappingOptions:
      required:
        - content_fields
      type: object
      properties:
        title_field:
          type: string
          description: The name of the index field to use as a title.
        url_field:
          type: string
          description: The name of the index field to use as a URL.
        filepath_field:
          type: string
          description: The name of the index field to use as a filepath.
        content_fields:
          type: array
          items:
            type: string
          description: The names of index fields that should be treated as content.
        content_fields_separator:
          type: string
          description: The separator pattern that content fields should use.
      description: Optional settings to control how fields are processed when using a configured Pinecone resource.
    onYourDataAuthenticationOptions:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataAuthenticationType'
      description: The authentication options for Azure OpenAI On Your Data.
      discriminator:
        propertyName: type
        mapping:
          api_key: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
          connection_string: '#/components/schemas/onYourDataConnectionStringAuthenticationOptions'
          key_and_key_id: '#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions'
          encoded_api_key: '#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions'
          access_token: '#/components/schemas/onYourDataAccessTokenAuthenticationOptions'
          system_assigned_managed_identity: '#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions'
          user_assigned_managed_identity: '#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions'
    onYourDataContextProperty:
      enum:
        - citations
        - intent
        - all_retrieved_documents
      type: string
      description: The context property.
      x-ms-enum:
        name: OnYourDataContextProperty
        modelAsString: true
        values:
          - name: citations
            value: citations
            description: The `citations` property.
          - name: intent
            value: intent
            description: The `intent` property.
          - name: allRetrievedDocuments
            value: all_retrieved_documents
            description: The `all_retrieved_documents` property.
    onYourDataAuthenticationType:
      enum:
        - api_key
        - connection_string
        - key_and_key_id
        - encoded_api_key
        - access_token
        - system_assigned_managed_identity
        - user_assigned_managed_identity
      type: string
      description: The authentication types supported with Azure OpenAI On Your Data.
      x-ms-enum:
        name: OnYourDataAuthenticationType
        modelAsString: true
        values:
          - name: apiKey
            value: api_key
            description: Authentication via API key.
          - name: connectionString
            value: connection_string
            description: Authentication via connection string.
          - name: keyAndKeyId
            value: key_and_key_id
            description: Authentication via key and key ID pair.
          - name: encodedApiKey
            value: encoded_api_key
            description: Authentication via encoded API key.
          - name: accessToken
            value: access_token
            description: Authentication via access token.
          - name: systemAssignedManagedIdentity
            value: system_assigned_managed_identity
            description: Authentication via system-assigned managed identity.
          - name: userAssignedManagedIdentity
            value: user_assigned_managed_identity
            description: Authentication via user-assigned managed identity.
    onYourDataApiKeyAuthenticationOptions:
      required:
        - key
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            key:
              type: string
              description: The API key to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using an API key.
      x-ms-discriminator-value: api_key
    onYourDataConnectionStringAuthenticationOptions:
      required:
        - connection_string
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            connection_string:
              type: string
              description: The connection string to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using a connection string.
      x-ms-discriminator-value: connection_string
    onYourDataKeyAndKeyIdAuthenticationOptions:
      required:
        - key
        - key_id
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            key:
              type: string
              description: The Elasticsearch key to use for authentication.
            key_id:
              type: string
              description: The Elasticsearch key ID to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using an Elasticsearch key and key ID pair.
      x-ms-discriminator-value: key_and_key_id
    onYourDataEncodedApiKeyAuthenticationOptions:
      required:
        - encoded_api_key
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            encoded_api_key:
              type: string
              description: The Elasticsearch encoded API key to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using an Elasticsearch encoded API key.
      x-ms-discriminator-value: encoded_api_key
    onYourDataAccessTokenAuthenticationOptions:
      required:
        - access_token
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            access_token:
              type: string
              description: The access token to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using access token.
      x-ms-discriminator-value: access_token
    onYourDataSystemAssignedManagedIdentityAuthenticationOptions:
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
      description: The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.
      x-ms-discriminator-value: system_assigned_managed_identity
    onYourDataUserAssignedManagedIdentityAuthenticationOptions:
      required:
        - managed_identity_resource_id
      allOf:
        - $ref: '#/components/schemas/onYourDataAuthenticationOptions'
        - properties:
            managed_identity_resource_id:
              type: string
              description: The resource ID of the user-assigned managed identity to use for authentication.
      description: The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.
      x-ms-discriminator-value: user_assigned_managed_identity
    onYourDataVectorizationSource:
      required:
        - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/onYourDataVectorizationSourceType'
      description: An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.
      discriminator:
        propertyName: type
        mapping:
          endpoint: '#/components/schemas/onYourDataEndpointVectorizationSource'
          deployment_name: '#/components/schemas/onYourDataDeploymentNameVectorizationSource'
          model_id: '#/components/schemas/onYourDataModelIdVectorizationSource'
    onYourDataVectorizationSourceType:
      enum:
        - endpoint
        - deployment_name
        - model_id
      type: string
      description: "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search."
      x-ms-enum:
        name: OnYourDataVectorizationSourceType
        modelAsString: true
        values:
          - name: endpoint
            value: endpoint
            description: Represents vectorization performed by public service calls to an Azure OpenAI embedding model.
          - name: deploymentName
            value: deployment_name
            description: "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
          - name: modelId
            value: model_id
            description: "Represents a specific embedding model ID as defined in the search service.\nCurrently only supported by Elasticsearch®."
    onYourDataEndpointVectorizationSource:
      required:
        - authentication
        - endpoint
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            endpoint:
              type: string
              description: Specifies the resource endpoint URL from which embeddings should be retrieved. It should be in the format of https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings. The api-version query parameter is not allowed.
              format: uri
            authentication:
              oneOf:
                - $ref: '#/components/schemas/onYourDataApiKeyAuthenticationOptions'
                - $ref: '#/components/schemas/onYourDataAccessTokenAuthenticationOptions'
            dimensions:
              type: integer
              description: The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.
              format: int32
      description: "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings."
      x-ms-discriminator-value: endpoint
    onYourDataDeploymentNameVectorizationSource:
      required:
        - deployment_name
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            deployment_name:
              type: string
              description: 'Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks.'
            dimensions:
              type: integer
              description: The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.
              format: int32
      description: "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource."
      x-ms-discriminator-value: deployment_name
    onYourDataModelIdVectorizationSource:
      required:
        - model_id
      allOf:
        - $ref: '#/components/schemas/onYourDataVectorizationSource'
        - properties:
            model_id:
              type: string
              description: Specifies the model ID to use for vectorization. This model ID must be defined in the search service.
      description: "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a search service model ID. Currently only supported by Elasticsearch®."
      x-ms-discriminator-value: model_id
    azureChatExtensionsMessageContext:
      type: object
      properties:
        citations:
          type: array
          items:
            $ref: '#/components/schemas/citation'
          description: 'The data source retrieval result, used to generate the assistant message in the response.'
          x-ms-identifiers: [ ]
        intent:
          type: string
          description: 'The detected intent from the chat history, used to pass to the next turn to carry over the context.'
        all_retrieved_documents:
          type: array
          items:
            $ref: '#/components/schemas/retrievedDocument'
          description: All the retrieved documents.
      description: "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension."
    citation:
      required:
        - content
      type: object
      properties:
        content:
          type: string
          description: The content of the citation.
        title:
          type: string
          description: The title of the citation.
        url:
          type: string
          description: The URL of the citation.
        filepath:
          type: string
          description: The file path of the citation.
        chunk_id:
          type: string
          description: The chunk ID of the citation.
      description: citation information for a chat completions response message.
    retrievedDocument:
      required:
        - search_queries
        - data_source_index
      type: object
      allOf:
        - $ref: '#/components/schemas/citation'
        - properties:
            search_queries:
              type: array
              items:
                type: string
              description: The search queries used to retrieve the document.
            data_source_index:
              type: integer
              description: The index of the data source.
              format: int32
            original_search_score:
              type: number
              description: The original search score of the retrieved document.
              format: double
            rerank_score:
              type: number
              description: The rerank score of the retrieved document.
              format: double
            filter_reason:
              $ref: '#/components/schemas/filterReason'
      description: The retrieved document.
    filterReason:
      enum:
        - score
        - rerank
      type: string
      description: The filtering reason of the retrieved document.
      x-ms-enum:
        name: FilterReason
        modelAsString: true
        values:
          - name: score
            value: score
            description: The document is filtered by original search score threshold defined by `strictness` configure.
          - name: rerank
            value: rerank
            description: 'The document is not filtered by original search score threshold, but is filtered by rerank score and `top_n_documents` configure.'
    chatCompletionMessageToolCall:
      required:
        - id
        - type
        - function
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          $ref: '#/components/schemas/toolCallType'
        function:
          required:
            - name
            - arguments
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
            arguments:
              type: string
              description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.'
          description: The function that the model called.
    toolCallType:
      enum:
        - function
      type: string
      description: 'The type of the tool call, in this case `function`.'
      x-ms-enum:
        name: ToolCallType
        modelAsString: true
        values:
          - value: function
            description: The tool call type is function.
    chatCompletionRequestMessageTool:
      required:
        - tool_call_id
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            tool_call_id:
              type: string
              description: Tool call that this message is responding to.
            content:
              type: string
              description: The contents of the message.
              nullable: true
          nullable: true
    chatCompletionRequestMessageFunction:
      required:
        - function_call_id
        - content
      allOf:
        - $ref: '#/components/schemas/chatCompletionRequestMessage'
        - type: object
          properties:
            role:
              enum:
                - function
              type: string
              description: 'The role of the messages author, in this case `function`.'
            name:
              type: string
              description: The contents of the message.
            content:
              type: string
              description: The contents of the message.
              nullable: true
          description: Deprecated. Message that represents a function.
          nullable: true
    createChatCompletionResponse:
      required:
        - id
        - object
        - created
        - model
        - choices
      type: object
      allOf:
        - $ref: '#/components/schemas/chatCompletionsResponseCommon'
        - properties:
            prompt_filter_results:
              $ref: '#/components/schemas/promptFilterResults'
            choices:
              type: array
              items:
                type: object
                allOf:
                  - $ref: '#/components/schemas/chatCompletionChoiceCommon'
                  - properties:
                      message:
                        $ref: '#/components/schemas/chatCompletionResponseMessage'
                      content_filter_results:
                        $ref: '#/components/schemas/contentFilterChoiceResults'
                      logprobs:
                        $ref: '#/components/schemas/chatCompletionChoiceLogProbs'
    chatCompletionChoiceLogProbs:
      required:
        - content
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/chatCompletionTokenLogprob'
          description: A list of message content tokens with log probability information.
          nullable: true
      description: Log probability information for the choice.
      nullable: true
    chatCompletionTokenLogprob:
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
      type: object
      properties:
        token:
          type: string
          description: The token.
        logprob:
          type: number
          description: The log probability of this token.
        bytes:
          type: array
          items:
            type: integer
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
          nullable: true
        top_logprobs:
          type: array
          items:
            required:
              - token
              - logprob
              - bytes
            type: object
            properties:
              token:
                type: string
                description: The token.
              logprob:
                type: number
                description: The log probability of this token.
              bytes:
                type: array
                items:
                  type: integer
                description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
                nullable: true
          description: 'List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.'
    chatCompletionResponseMessage:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/chatCompletionResponseMessageRole'
        content:
          type: string
          description: The contents of the message.
          nullable: true
        tool_calls:
          type: array
          items:
            $ref: '#/components/schemas/chatCompletionMessageToolCall'
          description: 'The tool calls generated by the model, such as function calls.'
        function_call:
          $ref: '#/components/schemas/chatCompletionFunctionCall'
        context:
          $ref: '#/components/schemas/azureChatExtensionsMessageContext'
      description: A chat completion message generated by the model.
    chatCompletionResponseMessageRole:
      enum:
        - assistant
      type: string
      description: The role of the author of the response message.
    chatCompletionToolChoiceOption:
      oneOf:
        - enum:
            - none
            - auto
          type: string
          description: '`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.'
        - $ref: '#/components/schemas/chatCompletionNamedToolChoice'
      description: 'Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}` forces the model to call that function.'
    chatCompletionNamedToolChoice:
      type: object
      properties:
        type:
          enum:
            - function
          type: string
          description: 'The type of the tool. Currently, only `function` is supported.'
        function:
          required:
            - name
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
    chatCompletionFunctionCall:
      required:
        - name
        - arguments
      type: object
      properties:
        name:
          type: string
          description: The name of the function to call.
        arguments:
          type: string
          description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.'
      description: 'Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.'
    chatCompletionsResponseCommon:
      required:
        - id
        - object
        - created
        - model
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for the chat completion.
        object:
          $ref: '#/components/schemas/chatCompletionResponseObject'
        created:
          type: integer
          description: The Unix timestamp (in seconds) of when the chat completion was created.
          format: unixtime
        model:
          type: string
          description: The model used for the chat completion.
        usage:
          $ref: '#/components/schemas/completionUsage'
        system_fingerprint:
          type: string
          description: Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
    chatCompletionResponseObject:
      enum:
        - chat.completion
      type: string
      description: The object type.
      x-ms-enum:
        name: ChatCompletionResponseObject
        modelAsString: true
        values:
          - value: chat.completion
            description: The object type is chat completion.
    completionUsage:
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        prompt_tokens:
          type: integer
          description: Number of tokens in the prompt.
        completion_tokens:
          type: integer
          description: Number of tokens in the generated completion.
        total_tokens:
          type: integer
          description: Total number of tokens used in the request (prompt + completion).
      description: Usage statistics for the completion request.
    chatCompletionTool:
      required:
        - type
        - function
      type: object
      properties:
        type:
          $ref: '#/components/schemas/chatCompletionToolType'
        function:
          required:
            - name
            - parameters
          type: object
          properties:
            description:
              type: string
              description: 'A description of what the function does, used by the model to choose when and how to call the function.'
            name:
              type: string
              description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
            parameters:
              $ref: '#/components/schemas/chatCompletionFunctionParameters'
    FunctionParameters:
      type: object
      description: "The parameters the functions accepts, described as a JSON Schema object. See the guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
    functionObject:
      required:
        - name
      type: object
      properties:
        description:
          type: string
          description: 'A description of what the function does, used by the model to choose when and how to call the function.'
        name:
          type: string
          description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
    chatCompletionToolType:
      enum:
        - function
      type: string
      description: 'The type of the tool. Currently, only `function` is supported.'
      x-ms-enum:
        name: ChatCompletionToolType
        modelAsString: true
        values:
          - value: function
            description: The tool type is function.
    chatCompletionChoiceCommon:
      type: object
      properties:
        index:
          type: integer
        finish_reason:
          type: string
    createTranslationRequest:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          description: The audio file to translate.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          description: 'The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.'
          default: 0
      description: Translation request.
    audioResponse:
      required:
        - text
      type: object
      properties:
        text:
          type: string
          description: Translated or transcribed text.
      description: Translation or transcription response when response_format was json
    audioVerboseResponse:
      required:
        - text
      type: object
      allOf:
        - $ref: '#/components/schemas/audioResponse'
        - properties:
            task:
              enum:
                - transcribe
                - translate
              type: string
              description: Type of audio task.
              x-ms-enum:
                modelAsString: true
            language:
              type: string
              description: Language.
            duration:
              type: number
              description: Duration.
            segments:
              type: array
              items:
                $ref: '#/components/schemas/audioSegment'
            words:
              type: array
              items:
                $ref: '#/components/schemas/audioWord'
      description: Translation or transcription response when response_format was verbose_json
    audioResponseFormat:
      title: AudioResponseFormat
      enum:
        - json
        - text
        - srt
        - verbose_json
        - vtt
      type: string
      description: Defines the format of the output.
      x-ms-enum:
        modelAsString: true
    createTranscriptionRequest:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          description: The audio file object to transcribe.
          format: binary
        prompt:
          type: string
          description: An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.
        response_format:
          $ref: '#/components/schemas/audioResponseFormat'
        temperature:
          type: number
          description: 'The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.'
          default: 0
        language:
          type: string
          description: The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.
        'timestamp_granularities[]':
          type: array
          items:
            enum:
              - word
              - segment
            type: string
          description: "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n"
          default:
            - segment
      description: Transcription request.
    audioSegment:
      type: object
      properties:
        id:
          type: integer
          description: Segment identifier.
        seek:
          type: number
          description: Offset of the segment.
        start:
          type: number
          description: Segment start offset.
        end:
          type: number
          description: Segment end offset.
        text:
          type: string
          description: Segment text.
        tokens:
          type: array
          items:
            type: number
          description: Tokens of the text.
        temperature:
          type: number
          description: Temperature.
        avg_logprob:
          type: number
          description: Average log probability.
        compression_ratio:
          type: number
          description: Compression ratio.
        no_speech_prob:
          type: number
          description: Probability of 'no speech'.
      description: Transcription or translation segment.
    audioWord:
      type: object
      properties:
        word:
          type: string
          description: Word
        start:
          type: number
          description: Word start offset.
        end:
          type: number
          description: Word end offset.
      description: Transcription or translation word.
    createSpeechRequest:
      required:
        - input
        - voice
      type: object
      properties:
        input:
          maxLength: 4096
          type: string
          description: The text to synthesize audio for. The maximum length is 4096 characters.
        voice:
          enum:
            - alloy
            - echo
            - fable
            - onyx
            - nova
            - shimmer
          type: string
          description: The voice to use for speech synthesis.
        response_format:
          enum:
            - mp3
            - opus
            - aac
            - flac
            - wav
            - pcm
          type: string
          description: The format to synthesize the audio in.
        speed:
          maximum: 4.0
          minimum: 0.25
          type: number
          description: The speed of the synthesize audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
          default: 1
      description: Speech request.
    imageQuality:
      enum:
        - standard
        - hd
      type: string
      description: The quality of the image that will be generated.
      default: standard
      x-ms-enum:
        name: Quality
        modelAsString: true
        values:
          - value: standard
            description: Standard quality creates images with standard quality.
            name: Standard
          - value: hd
            description: HD quality creates images with finer details and greater consistency across the image.
            name: HD
    imagesResponseFormat:
      enum:
        - url
        - b64_json
      type: string
      description: The format in which the generated images are returned.
      default: url
      x-ms-enum:
        name: ImagesResponseFormat
        modelAsString: true
        values:
          - value: url
            description: The URL that provides temporary access to download the generated images.
            name: Url
          - value: b64_json
            description: The generated images are returned as base64 encoded string.
            name: Base64Json
    imageSize:
      enum:
        - 256x256
        - 512x512
        - 1792x1024
        - 1024x1792
        - 1024x1024
      type: string
      description: The size of the generated images.
      default: 1024x1024
      x-ms-enum:
        name: Size
        modelAsString: true
        values:
          - value: 256x256
            description: The desired size of the generated image is 256x256 pixels. Only supported for dall-e-2.
            name: Size256x256
          - value: 512x512
            description: The desired size of the generated image is 512x512 pixels. Only supported for dall-e-2.
            name: Size512x512
          - value: 1792x1024
            description: The desired size of the generated image is 1792x1024 pixels. Only supported for dall-e-3.
            name: Size1792x1024
          - value: 1024x1792
            description: The desired size of the generated image is 1024x1792 pixels. Only supported for dall-e-3.
            name: Size1024x1792
          - value: 1024x1024
            description: The desired size of the generated image is 1024x1024 pixels.
            name: Size1024x1024
    imageStyle:
      enum:
        - vivid
        - natural
      type: string
      description: The style of the generated images.
      default: vivid
      x-ms-enum:
        name: Style
        modelAsString: true
        values:
          - value: vivid
            description: Vivid creates images that are hyper-realistic and dramatic.
            name: Vivid
          - value: natural
            description: Natural creates images that are more natural and less hyper-realistic.
            name: Natural
    imageGenerationsRequest:
      required:
        - prompt
      type: object
      properties:
        prompt:
          minLength: 1
          type: string
          description: A text description of the desired image(s). The maximum length is 4000 characters.
          format: string
          example: a corgi in a field
        n:
          maximum: 1.0
          minimum: 1.0
          type: integer
          description: The number of images to generate.
          default: 1
        size:
          $ref: '#/components/schemas/imageSize'
        response_format:
          $ref: '#/components/schemas/imagesResponseFormat'
        user:
          type: string
          description: 'A unique identifier representing your end-user, which can help to monitor and detect abuse.'
          format: string
          example: user123456
        quality:
          $ref: '#/components/schemas/imageQuality'
        style:
          $ref: '#/components/schemas/imageStyle'
    generateImagesResponse:
      required:
        - created
        - data
      type: object
      properties:
        created:
          type: integer
          description: The unix timestamp when the operation was created.
          format: unixtime
          example: '1676540381'
        data:
          type: array
          items:
            $ref: '#/components/schemas/imageResult'
          description: 'The result data of the operation, if successful'
    imageResult:
      type: object
      properties:
        url:
          type: string
          description: The image url.
          example: https://www.contoso.com
        b64_json:
          type: string
          description: The base64 encoded image
        content_filter_results:
          $ref: '#/components/schemas/dalleContentFilterResults'
        revised_prompt:
          type: string
          description: 'The prompt that was used to generate the image, if there was any revision to the prompt.'
        prompt_filter_results:
          $ref: '#/components/schemas/dalleFilterResults'
      description: 'The image url or encoded image if successful, and an error otherwise.'
    line:
      required:
        - text
        - spans
      type: object
      properties:
        text:
          type: string
        spans:
          type: array
          items:
            $ref: '#/components/schemas/span'
          description: An array of spans that represent detected objects and its bounding box information.
      description: 'A content line object consisting of an adjacent sequence of content elements, such as words and selection marks.'
    span:
      required:
        - text
        - offset
        - length
        - polygon
      type: object
      properties:
        text:
          type: string
          description: The text content of the span that represents the detected object.
        offset:
          type: integer
          description: 'The character offset within the text where the span begins. This offset is defined as the position of the first character of the span, counting from the start of the text as Unicode codepoints.'
        length:
          type: integer
          description: 'The length of the span in characters, measured in Unicode codepoints.'
        polygon:
          type: array
          items:
            type: object
            properties:
              x:
                type: number
                description: The x-coordinate of the point.
              y:
                type: number
                description: The y-coordinate of the point.
          description: An array of objects representing points in the polygon that encloses the detected object.
      description: A span object that represents a detected object and its bounding box information.
    runCompletionUsage:
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      description: 'Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).'
      nullable: true
    runStepCompletionUsage:
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run step.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run step.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      description: Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
      nullable: true
    assistantsApiResponseFormatOption:
      oneOf:
        - enum:
            - none
            - auto
          type: string
          description: "`auto` is the default value\n"
          x-ms-enum:
            name: AssistantsApiResponseFormatOption
            modelAsString: true
            values:
              - value: none
              - value: auto
        - $ref: '#/components/schemas/assistantsApiResponseFormat'
      description: "Specifies the format that the model must output. Compatible with GPT-4 Turbo and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
    assistantsApiResponseFormat:
      type: object
      properties:
        type:
          enum:
            - text
            - json_object
          type: string
          description: Must be one of `text` or `json_object`.
          default: text
          example: json_object
          x-ms-enum:
            name: AssistantsApiResponseFormat
            modelAsString: true
            values:
              - value: text
              - value: json_object
      description: "An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.\n"
    assistantObject:
      title: Assistant
      required:
        - id
        - object
        - created_at
        - name
        - description
        - model
        - instructions
        - tools
        - metadata
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - assistant
          type: string
          description: 'The object type, which is always `assistant`.'
          x-ms-enum:
            name: AssistantObjectType
            modelAsString: true
            values:
              - value: assistant
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the assistant was created.
        name:
          maxLength: 256
          type: string
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          nullable: true
        description:
          maxLength: 512
          type: string
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          nullable: true
        model:
          type: string
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
        instructions:
          maxLength: 256000
          type: string
          description: "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
          nullable: true
        tools:
          maxItems: 128
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of file IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          default: 1
          nullable: true
          example: 1
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      description: Represents an `assistant` that can call the model and use tools.
    createAssistantRequest:
      required:
        - model
      type: object
      properties:
        model:
          anyOf:
            - type: string
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
        name:
          maxLength: 256
          type: string
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          nullable: true
        description:
          maxLength: 512
          type: string
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          nullable: true
        instructions:
          maxLength: 256000
          type: string
          description: "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
          nullable: true
        tools:
          maxItems: 128
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              oneOf:
                - required:
                    - vector_store_ids
                - required:
                    - vector_stores
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                vector_stores:
                  maxItems: 1
                  type: array
                  items:
                    type: object
                    properties:
                      file_ids:
                        maxItems: 10000
                        type: array
                        items:
                          type: string
                        description: "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                      metadata:
                        type: object
                        description: "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
                  description: "A helper to create a vector store with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          default: 1
          nullable: true
          example: 1
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      additionalProperties: false
    modifyAssistantRequest:
      type: object
      properties:
        model:
          anyOf:
            - type: string
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
        name:
          maxLength: 256
          type: string
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          nullable: true
        description:
          maxLength: 512
          type: string
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          nullable: true
        instructions:
          maxLength: 32768
          type: string
          description: "The system instructions that the assistant uses. The maximum length is 32768 characters.\n"
          nullable: true
        tools:
          maxItems: 128
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n"
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "Overrides the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          default: 1
          nullable: true
          example: 1
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      additionalProperties: false
    deleteAssistantResponse:
      required:
        - id
        - object
        - deleted
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
            - assistant.deleted
          type: string
          x-ms-enum:
            name: DeleteAssistantResponseState
            modelAsString: true
            values:
              - value: assistant.deleted
    listAssistantsResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/assistantObject'
        first_id:
          type: string
          example: asst_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: asst_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
    assistantToolsCode:
      title: Code interpreter tool
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - code_interpreter
          type: string
          description: 'The type of tool being defined: `code_interpreter`'
          x-ms-enum:
            name: assistantToolsCodeType
            modelAsString: true
            values:
              - value: code_interpreter
    assistantToolsFileSearch:
      title: FileSearch tool
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - file_search
          type: string
          description: 'The type of tool being defined: `file_search`'
          x-ms-enum:
            name: assistantToolsFileSearchType
            modelAsString: true
            values:
              - value: file_search
    assistantToolsFunction:
      title: Function tool
      required:
        - type
        - function
      type: object
      properties:
        type:
          enum:
            - function
          type: string
          description: 'The type of tool being defined: `function`'
          x-ms-enum:
            name: assistantToolsFunction
            modelAsString: true
            values:
              - value: function
        function:
          required:
            - name
            - parameters
            - description
          type: object
          properties:
            description:
              type: string
              description: 'A description of what the function does, used by the model to choose when and how to call the function.'
            name:
              type: string
              description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.'
            parameters:
              $ref: '#/components/schemas/chatCompletionFunctionParameters'
          description: The function definition.
    truncationObject:
      title: Thread Truncation Controls
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - auto
            - last_messages
          type: string
          description: 'The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.'
          x-ms-enum:
            name: TruncationType
            modelAsString: true
            values:
              - value: auto
              - value: last_messages
        last_messages:
          minimum: 1.0
          type: integer
          description: The number of most recent messages from the thread when constructing the context for the run.
          nullable: true
      description: Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
    assistantsApiToolChoiceOption:
      oneOf:
        - enum:
            - none
            - auto
          type: string
          description: "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n"
          x-ms-enum:
            name: AssistantsApiToolChoiceOption
            modelAsString: true
            values:
              - value: none
              - value: auto
        - $ref: '#/components/schemas/assistantsNamedToolChoice'
      description: "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling a tool.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n"
    assistantsNamedToolChoice:
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - function
            - code_interpreter
            - file_search
          type: string
          description: 'The type of the tool. If type is `function`, the function name must be set'
          x-ms-enum:
            name: AssistantsNamedToolChoiceType
            modelAsString: true
            values:
              - value: function
              - value: code_interpreter
              - value: file_search
        function:
          required:
            - name
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
      description: Specifies a tool the model should use. Use to force the model to call a specific tool.
    runObject:
      title: A run on a thread
      required:
        - id
        - object
        - created_at
        - thread_id
        - assistant_id
        - status
        - required_action
        - last_error
        - expires_at
        - started_at
        - cancelled_at
        - failed_at
        - completed_at
        - model
        - instructions
        - tools
        - metadata
        - usage
        - incomplete_details
        - max_prompt_tokens
        - max_completion_tokens
        - truncation_strategy
        - tool_choice
        - response_format
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - thread.run
          type: string
          description: 'The object type, which is always `thread.run`.'
          x-ms-enum:
            name: runObjectType
            modelAsString: true
            values:
              - value: thread.run
                description: The run object type which is always thread.run
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was created.
        thread_id:
          type: string
          description: 'The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.'
        assistant_id:
          type: string
          description: The ID of the assistant used for execution of this run.
        status:
          enum:
            - queued
            - in_progress
            - requires_action
            - cancelling
            - cancelled
            - failed
            - completed
            - expired
          type: string
          description: 'The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.'
          x-ms-enum:
            name: RunObjectStatus
            modelAsString: true
            values:
              - value: queued
                description: The queued state
              - value: in_progress
                description: The in_progress state
              - value: requires_action
                description: The required_action state
              - value: cancelling
                description: The cancelling state
              - value: cancelled
                description: The cancelled state
              - value: failed
                description: The failed state
              - value: completed
                description: The completed state
              - value: expired
                description: The expired state
        required_action:
          required:
            - type
            - submit_tool_outputs
          type: object
          properties:
            type:
              enum:
                - submit_tool_outputs
              type: string
              description: 'For now, this is always `submit_tool_outputs`.'
            submit_tool_outputs:
              required:
                - tool_calls
              type: object
              properties:
                tool_calls:
                  type: array
                  items:
                    $ref: '#/components/schemas/runToolCallObject'
                  description: A list of the relevant tool calls.
              description: Details on the tool outputs needed for this run to continue.
          description: Details on the action required to continue the run. Will be `null` if no action is required.
          nullable: true
        last_error:
          required:
            - code
            - message
          type: object
          properties:
            code:
              enum:
                - server_error
                - rate_limit_exceeded
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              x-ms-enum:
                name: LastErrorCode
                modelAsString: true
                values:
                  - value: server_error
                    description: The server failed to respond to request due to server error
                  - value: rate_limit_exceeded
                    description: The server failed to respond to request due to rate limit exceeded
            message:
              type: string
              description: A human-readable description of the error.
          description: The last error associated with this run. Will be `null` if there are no errors.
          nullable: true
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run will expire.
        started_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was started.
          nullable: true
        cancelled_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          nullable: true
        failed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run failed.
          nullable: true
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run was completed.
          nullable: true
        incomplete_details:
          type: object
          properties:
            reason:
              enum:
                - max_completion_tokens
                - max_prompt_tokens
              type: string
              description: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
              x-ms-enum:
                name: IncompleteDetailsReason
                modelAsString: true
                values:
                  - value: max_completion_tokens
                  - value: max_prompt_tokens
          description: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
          nullable: true
        model:
          type: string
          description: The model that the assistant used for this run.
        instructions:
          type: string
          description: The instructions that the assistant used for this run.
        tools:
          maxItems: 20
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: The list of tools that the assistant used for this run.
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        usage:
          $ref: '#/components/schemas/runCompletionUsage'
        temperature:
          type: number
          description: 'The sampling temperature used for this run. If not set, defaults to 1.'
          nullable: true
        top_p:
          type: number
          description: 'The nucleus sampling value used for this run. If not set, defaults to 1.'
          nullable: true
        max_prompt_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of prompt tokens specified to have been used over the course of the run.\n"
          nullable: true
        max_completion_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of completion tokens specified to have been used over the course of the run.\n"
          nullable: true
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      description: 'Represents an execution run on a [thread](/docs/api-reference/threads).'
    createRunRequest:
      required:
        - thread_id
        - assistant_id
      type: object
      properties:
        assistant_id:
          type: string
          description: The ID of the assistant to use to execute this run.
        model:
          type: string
          description: 'The ID of the Model to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.'
          nullable: true
        instructions:
          type: string
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
          nullable: true
        additional_instructions:
          type: string
          description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
          nullable: true
        additional_messages:
          type: array
          items:
            $ref: '#/components/schemas/createMessageRequest'
          description: Adds additional messages to the thread before creating the run.
          nullable: true
        tools:
          maxItems: 20
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          default: 1
          nullable: true
          example: 1
        stream:
          type: boolean
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
        max_prompt_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          nullable: true
        max_completion_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          nullable: true
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      additionalProperties: false
    listRunsResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/runObject'
        first_id:
          type: string
          example: run_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: run_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
    modifyRunRequest:
      type: object
      properties:
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    submitToolOutputsRunRequest:
      required:
        - tool_outputs
      type: object
      properties:
        tool_outputs:
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue the run.
          description: A list of tools for which the outputs are being submitted.
        stream:
          type: boolean
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
      additionalProperties: false
    runToolCallObject:
      required:
        - id
        - type
        - function
      type: object
      properties:
        id:
          type: string
          description: 'The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.'
        type:
          enum:
            - function
          type: string
          description: 'The type of tool call the output is required for. For now, this is always `function`.'
          x-ms-enum:
            name: RunToolCallObjectType
            modelAsString: true
            values:
              - value: function
        function:
          required:
            - name
            - arguments
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the function.
          description: The function definition.
      description: Tool call objects
    createThreadAndRunRequest:
      required:
        - thread_id
        - assistant_id
      type: object
      properties:
        assistant_id:
          type: string
          description: The ID of the assistant to use to execute this run.
        thread:
          $ref: '#/components/schemas/createThreadRequest'
        model:
          type: string
          description: 'The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.'
          nullable: true
        instructions:
          type: string
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
          nullable: true
        tools:
          maxItems: 20
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/assistantToolsCode'
              - $ref: '#/components/schemas/assistantToolsFileSearch'
              - $ref: '#/components/schemas/assistantToolsFunction'
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          nullable: true
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
        temperature:
          maximum: 2.0
          minimum: 0.0
          type: number
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          default: 1
          nullable: true
          example: 1
        top_p:
          maximum: 1.0
          minimum: 0.0
          type: number
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          default: 1
          nullable: true
          example: 1
        stream:
          type: boolean
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
        max_prompt_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          nullable: true
        max_completion_tokens:
          minimum: 256.0
          type: integer
          description: "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          nullable: true
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
      additionalProperties: false
    threadObject:
      title: Thread
      required:
        - id
        - object
        - created_at
        - tool_resources
        - metadata
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - thread
          type: string
          description: 'The object type, which is always `thread`.'
          x-ms-enum:
            name: ThreadObjectType
            modelAsString: true
            values:
              - value: thread
                description: The type of thread object which is always `thread`
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the thread was created.
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      description: 'Represents a thread that contains [messages](/docs/api-reference/messages).'
    createThreadRequest:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/createMessageRequest'
          description: A list of messages to start the thread with.
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              oneOf:
                - required:
                    - vector_store_ids
                - required:
                    - vector_stores
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                vector_stores:
                  maxItems: 1
                  type: array
                  items:
                    type: object
                    properties:
                      file_ids:
                        maxItems: 10000
                        type: array
                        items:
                          type: string
                        description: "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                      metadata:
                        type: object
                        description: "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
                  description: "A helper to create a vector store with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    modifyThreadRequest:
      type: object
      properties:
        tool_resources:
          type: object
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  maxItems: 20
                  type: array
                  items:
                    type: string
                  description: "A list of File IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
            file_search:
              type: object
              properties:
                vector_store_ids:
                  maxItems: 1
                  type: array
                  items:
                    type: string
                  description: "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    deleteThreadResponse:
      required:
        - id
        - object
        - deleted
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
            - thread.deleted
          type: string
          x-ms-enum:
            name: DeleteThreadResponseObjectState
            modelAsString: true
            values:
              - value: thread.deleted
                description: The delete thread response object state which is `thread.deleted`
    listThreadsResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/threadObject'
        first_id:
          type: string
          example: asst_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: asst_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
    messageObject:
      title: The message object
      required:
        - id
        - object
        - created_at
        - thread_id
        - status
        - incomplete_details
        - completed_at
        - incomplete_at
        - role
        - content
        - assistant_id
        - run_id
        - attachments
        - metadata
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - thread.message
          type: string
          description: 'The object type, which is always `thread.message`.'
          x-ms-enum:
            name: MessageObjectType
            modelAsString: true
            values:
              - value: thread.message
                description: The message object type which is `thread.message`
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was created.
        thread_id:
          type: string
          description: 'The [thread](/docs/api-reference/threads) ID that this message belongs to.'
        status:
          enum:
            - in_progress
            - incomplete
            - completed
          type: string
          description: 'The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.'
          x-ms-enum:
            name: MessageObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: incomplete
              - value: completed
        incomplete_details:
          required:
            - reason
          type: object
          properties:
            reason:
              enum:
                - content_filter
                - max_tokens
                - run_cancelled
                - run_expired
                - run_failed
              type: string
              description: The reason the message is incomplete.
              x-ms-enum:
                name: MessageObjectIncompleteReason
                modelAsString: true
                values:
                  - value: content_filter
                  - value: max_tokens
                  - value: run_cancelled
                  - value: run_expired
                  - value: run_failed
          description: 'On an incomplete message, details about why the message is incomplete.'
          nullable: true
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was completed.
          nullable: true
        incomplete_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the message was marked as incomplete.
          nullable: true
        role:
          enum:
            - user
            - assistant
          type: string
          description: The entity that produced the message. One of `user` or `assistant`.
          x-ms-enum:
            name: MessageObjectRole
            modelAsString: true
            values:
              - value: user
              - value: assistant
        content:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/messageContentImageFileObject'
              - $ref: '#/components/schemas/messageContentTextObject'
          description: The content of the message in array of text and/or images.
        assistant_id:
          type: string
          description: 'If applicable, the ID of the assistant that authored this message.'
          nullable: true
        run_id:
          type: string
          description: 'If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.'
          nullable: true
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/assistantToolsCode'
                    - $ref: '#/components/schemas/assistantToolsFileSearch'
                description: The tools to add this file to.
          description: 'A list of files attached to the message, and the tools they were added to.'
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      description: 'Represents a message within a [thread](/docs/api-reference/threads).'
    messageDeltaObject:
      title: Message delta object
      required:
        - id
        - object
        - delta
      type: object
      properties:
        id:
          type: string
          description: 'The identifier of the message, which can be referenced in API endpoints.'
        object:
          enum:
            - thread.message.delta
          type: string
          description: 'The object type, which is always `thread.message.delta`.'
          x-ms-enum:
            name: MessageDeltaObjectType
            modelAsString: true
            values:
              - value: thread.message.delta
        delta:
          type: object
          properties:
            role:
              enum:
                - user
                - assistant
              type: string
              description: The entity that produced the message. One of `user` or `assistant`.
              x-ms-enum:
                name: MessageDeltaObjectDeltaRole
                modelAsString: true
                values:
                  - value: user
                  - value: assistant
            content:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/messageDeltaContentImageFileObject'
                  - $ref: '#/components/schemas/messageDeltaContentTextObject'
              description: The content of the message in array of text and/or images.
          description: The delta containing the fields that have changed on the Message.
      description: "Represents a message delta i.e. any changed fields on a message during streaming.\n"
    createMessageRequest:
      required:
        - role
        - content
      type: object
      properties:
        role:
          enum:
            - user
            - assistant
          type: string
          description: "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
          x-ms-enum:
            name: CreateMessageRequestRole
            modelAsString: true
            values:
              - value: user
              - value: assistant
        content:
          maxLength: 256000
          minLength: 1
          type: string
          description: The content of the message.
        attachments:
          required:
            - file_id
            - tools
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/assistantToolsCode'
                    - $ref: '#/components/schemas/assistantToolsFileSearch'
                  x-oaiExpandable: true
                description: The tools to add this file to.
          description: 'A list of files attached to the message, and the tools they should be added to.'
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    modifyMessageRequest:
      type: object
      properties:
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    deleteMessageResponse:
      required:
        - id
        - object
        - deleted
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
            - thread.message.deleted
          type: string
          x-ms-enum:
            name: DeleteMessageResponseObject
            modelAsString: true
            values:
              - value: thread.message.deleted
                description: The delete message response object state
    listMessagesResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/messageObject'
        first_id:
          type: string
          example: msg_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: msg_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
    messageContentImageFileObject:
      title: Image file
      required:
        - type
        - image_file
      type: object
      properties:
        type:
          enum:
            - image_file
          type: string
          description: Always `image_file`.
          x-ms-enum:
            name: MessageContentImageFileObjectType
            modelAsString: true
            values:
              - value: image_file
                description: The message content image file type
        image_file:
          required:
            - file_id
          type: object
          properties:
            file_id:
              type: string
              description: The file ID of the image in the message content.
      description: References an image file in the content of a message.
    messageContentTextObject:
      title: Text
      required:
        - type
        - text
      type: object
      properties:
        type:
          enum:
            - text
          type: string
          description: Always `text`.
          x-ms-enum:
            name: messageContentTextObjectType
            modelAsString: true
            values:
              - value: text
                description: The message content text Object type
        text:
          required:
            - value
            - annotations
          type: object
          properties:
            value:
              type: string
              description: The data that makes up the text.
            annotations:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/messageContentTextAnnotationsFileCitationObject'
                  - $ref: '#/components/schemas/messageContentTextAnnotationsFilePathObject'
      description: The text content that is part of a message.
    messageContentTextAnnotationsFileCitationObject:
      title: File citation
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index
      type: object
      properties:
        type:
          enum:
            - file_citation
          type: string
          description: Always `file_citation`.
          x-ms-enum:
            name: FileCitationObjectType
            modelAsString: true
            values:
              - value: file_citation
                description: The file citation object type
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          required:
            - file_id
            - quote
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the specific File the citation is from.
            quote:
              type: string
              description: The specific quote in the file.
        start_index:
          minimum: 0.0
          type: integer
        end_index:
          minimum: 0.0
          type: integer
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
    messageContentTextAnnotationsFilePathObject:
      title: File path
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index
      type: object
      properties:
        type:
          enum:
            - file_path
          type: string
          description: Always `file_path`.
          x-ms-enum:
            name: FilePathObjectType
            modelAsString: true
            values:
              - value: file_path
                description: The file path object type
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          required:
            - file_id
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the file that was generated.
        start_index:
          minimum: 0.0
          type: integer
        end_index:
          minimum: 0.0
          type: integer
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    messageDeltaContentImageFileObject:
      title: Image file
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          enum:
            - image_file
          type: string
          description: Always `image_file`.
          x-ms-enum:
            name: MessageDeltaContentImageFileObjectType
            modelAsString: true
            values:
              - value: image_file
        image_file:
          type: object
          properties:
            file_id:
              type: string
              description: The File ID of the image in the message content.
      description: References an image File in the content of a message.
    messageDeltaContentTextObject:
      title: Text
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the content part in the message.
        type:
          enum:
            - text
          type: string
          description: Always `text`.
          x-ms-enum:
            name: MessageDeltaContentTextObjectType
            modelAsString: true
            values:
              - value: text
        text:
          type: object
          properties:
            value:
              type: string
              description: The data that makes up the text.
            annotations:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/messageDeltaContentTextAnnotationsFileCitationObject'
                  - $ref: '#/components/schemas/messageDeltaContentTextAnnotationsFilePathObject'
      description: The text content that is part of a message.
    messageDeltaContentTextAnnotationsFileCitationObject:
      title: File citation
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          enum:
            - file_citation
          type: string
          description: Always `file_citation`.
          x-ms-enum:
            name: MessageDeltaContentTextAnnotationsFileCitationObjectType
            modelAsString: true
            values:
              - value: file_citation
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_citation:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the specific File the citation is from.
            quote:
              type: string
              description: The specific quote in the file.
        start_index:
          minimum: 0.0
          type: integer
        end_index:
          minimum: 0.0
          type: integer
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
    messageDeltaContentTextAnnotationsFilePathObject:
      title: File path
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the annotation in the text content part.
        type:
          enum:
            - file_path
          type: string
          description: Always `file_path`.
          x-ms-enum:
            name: MessageDeltaContentTextAnnotationsFilePathObjectType
            modelAsString: true
            values:
              - value: file_path
        text:
          type: string
          description: The text in the message content that needs to be replaced.
        file_path:
          type: object
          properties:
            file_id:
              type: string
              description: The ID of the file that was generated.
        start_index:
          minimum: 0.0
          type: integer
        end_index:
          minimum: 0.0
          type: integer
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
    runStepObject:
      title: Run steps
      required:
        - id
        - object
        - created_at
        - assistant_id
        - thread_id
        - run_id
        - type
        - status
        - step_details
        - last_error
        - expired_at
        - cancelled_at
        - failed_at
        - completed_at
        - metadata
      type: object
      properties:
        id:
          type: string
          description: 'The identifier of the run step, which can be referenced in API endpoints.'
        object:
          enum:
            - assistant.run.step
          type: string
          description: 'The object type, which is always `assistant.run.step``.'
          x-ms-enum:
            name: RunStepObjectType
            modelAsString: true
            values:
              - value: assistant.run.step
                description: 'The object type, which is always `assistant.run.step`'
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step was created.
        assistant_id:
          type: string
          description: The ID of the assistant associated with the run step.
        thread_id:
          type: string
          description: 'The ID of the [thread](/docs/api-reference/threads) that was run.'
        run_id:
          type: string
          description: 'The ID of the [run](/docs/api-reference/runs) that this run step is a part of.'
        type:
          enum:
            - message_creation
            - tool_calls
          type: string
          description: 'The type of run step, which can be either `message_creation` or `tool_calls`.'
          x-ms-enum:
            name: RunStepObjectType
            modelAsString: true
            values:
              - value: message_creation
                description: The message_creation run step
              - value: tool_calls
                description: The tool_calls run step
        status:
          enum:
            - in_progress
            - cancelled
            - failed
            - completed
            - expired
          type: string
          description: 'The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.'
          x-ms-enum:
            name: RunStepObjectStatus
            modelAsString: true
            values:
              - value: in_progress
                description: The in_progress run status
              - value: cancelled
                description: The cancelled run status
              - value: failed
                description: The cancelled run status
              - value: completed
                description: The cancelled run status
              - value: expired
                description: The cancelled run status
        step_details:
          type: object
          oneOf:
            - $ref: '#/components/schemas/runStepDetailsMessageCreationObject'
            - $ref: '#/components/schemas/runStepDetailsToolCallsObject'
          description: The details of the run step.
        last_error:
          required:
            - code
            - message
          type: object
          properties:
            code:
              enum:
                - server_error
                - rate_limit_exceeded
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              x-ms-enum:
                name: LastErrorCode
                modelAsString: true
                values:
                  - value: server_error
                    description: The server_error
                  - value: rate_limit_exceeded
                    description: The rate_limit_exceeded status
            message:
              type: string
              description: A human-readable description of the error.
          description: The last error associated with this run step. Will be `null` if there are no errors.
          nullable: true
        expired_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
          nullable: true
        cancelled_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          nullable: true
        failed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step failed.
          nullable: true
        completed_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the run step completed.
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      description: "Represents a step in execution of a run.\n"
    runStepDeltaObject:
      title: Run step delta object
      required:
        - id
        - object
        - delta
      type: object
      properties:
        id:
          type: string
          description: 'The identifier of the run step, which can be referenced in API endpoints.'
        object:
          enum:
            - thread.run.step.delta
          type: string
          description: 'The object type, which is always `thread.run.step.delta`.'
          x-ms-enum:
            name: RunStepDeltaObjectType
            modelAsString: true
            values:
              - value: thread.run.step.delta
        delta:
          type: object
          properties:
            step_details:
              type: object
              oneOf:
                - $ref: '#/components/schemas/runStepDeltaStepDetailsMessageCreationObject'
                - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsObject'
              description: The details of the run step.
              x-oaiExpandable: true
          description: The delta containing the fields that have changed on the run step.
      description: "Represents a run step delta i.e. any changed fields on a run step during streaming.\n"
    listRunStepsResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/runStepObject'
        first_id:
          type: string
          example: step_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: step_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
    runStepDetailsMessageCreationObject:
      title: Message creation
      required:
        - type
        - message_creation
      type: object
      properties:
        type:
          enum:
            - message_creation
          type: string
          description: Always `message_creation``.
          x-ms-enum:
            name: RunStepDetailsMessageCreationObjectType
            modelAsString: true
            values:
              - value: message_creation
        message_creation:
          required:
            - message_id
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
      description: Details of the message creation by the run step.
    runStepDeltaStepDetailsMessageCreationObject:
      title: Message creation
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - message_creation
          type: string
          description: Always `message_creation`.
          x-ms-enum:
            name: RunStepDeltaStepDetailsMessageCreationObjectType
            modelAsString: true
            values:
              - value: message_creation
        message_creation:
          type: object
          properties:
            message_id:
              type: string
              description: The ID of the message that was created by this run step.
      description: Details of the message creation by the run step.
    runStepDetailsToolCallsObject:
      title: Tool calls
      required:
        - type
        - tool_calls
      type: object
      properties:
        type:
          enum:
            - tool_calls
          type: string
          description: Always `tool_calls`.
          x-ms-enum:
            name: RunStepDetailsToolCallsObjectType
            modelAsString: true
            values:
              - value: tool_calls
        tool_calls:
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/runStepDetailsToolCallsCodeObject'
              - $ref: '#/components/schemas/runStepDetailsToolCallsFileSearchObject'
              - $ref: '#/components/schemas/runStepDetailsToolCallsFunctionObject'
          description: "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval` or `function`.\n"
      description: Details of the tool call.
    runStepDeltaStepDetailsToolCallsObject:
      title: Tool calls
      required:
        - type
      type: object
      properties:
        type:
          enum:
            - tool_calls
          type: string
          description: Always `tool_calls`.
          x-ms-enum:
            name: RunStepDeltaStepDetailsToolCallsObjectType
            modelAsString: true
            values:
              - value: tool_calls
        tool_calls:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsCodeObject'
              - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsFileSearchObject'
              - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsFunctionObject'
            x-oaiExpandable: true
          description: "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search` or `function`.\n"
      description: Details of the tool call.
    runStepDetailsToolCallsCodeObject:
      title: Code interpreter tool call
      required:
        - id
        - type
        - code_interpreter
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call.
        type:
          enum:
            - code_interpreter
          type: string
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeObjectType
            modelAsString: true
            values:
              - value: code_interpreter
        code_interpreter:
          required:
            - input
            - outputs
          type: object
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/runStepDetailsToolCallsCodeOutputLogsObject'
                  - $ref: '#/components/schemas/runStepDetailsToolCallsCodeOutputImageObject'
              description: 'The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.'
          description: The Code Interpreter tool call definition.
      description: Details of the Code Interpreter tool call the run step was involved in.
    runStepDeltaStepDetailsToolCallsCodeObject:
      title: Code interpreter tool call
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call.
        type:
          enum:
            - code_interpreter
          type: string
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
          x-ms-enum:
            name: RunStepDeltaStepDetailsToolCallsCodeObjectType
            modelAsString: true
            values:
              - value: code_interpreter
        code_interpreter:
          type: object
          properties:
            input:
              type: string
              description: The input to the Code Interpreter tool call.
            outputs:
              type: array
              items:
                type: object
                oneOf:
                  - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
                  - $ref: '#/components/schemas/runStepDeltaStepDetailsToolCallsCodeOutputImageObject'
              description: 'The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.'
          description: The Code Interpreter tool call definition.
      description: Details of the Code Interpreter tool call the run step was involved in.
    runStepDetailsToolCallsCodeOutputLogsObject:
      title: Code interpreter log output
      required:
        - type
        - logs
      type: object
      properties:
        type:
          enum:
            - logs
          type: string
          description: Always `logs`.
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeOutputLogsObjectType
            modelAsString: true
            values:
              - value: logs
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      description: Text output from the Code Interpreter tool call as part of a run step.
    runStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      title: Code interpreter log output
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          enum:
            - logs
          type: string
          description: Always `logs`.
          x-ms-enum:
            name: RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType
            modelAsString: true
            values:
              - value: logs
        logs:
          type: string
          description: The text output from the Code Interpreter tool call.
      description: Text output from the Code Interpreter tool call as part of a run step.
    runStepDetailsToolCallsCodeOutputImageObject:
      title: Code interpreter image output
      required:
        - type
        - image
      type: object
      properties:
        type:
          enum:
            - image
          type: string
          description: Always `image`.
          x-ms-enum:
            name: RunStepDetailsToolCallsCodeOutputImageObjectType
            modelAsString: true
            values:
              - value: image
        image:
          required:
            - file_id
          type: object
          properties:
            file_id:
              type: string
              description: The file ID of the image.
    runStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      title: Code interpreter image output
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the output in the outputs array.
        type:
          enum:
            - image
          type: string
          description: Always `image`.
          x-ms-enum:
            name: RunStepDeltaStepDetailsToolCallsCodeOutputImageObject
            modelAsString: true
            values:
              - value: image
        image:
          type: object
          properties:
            file_id:
              type: string
              description: The file ID of the image.
    runStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      required:
        - id
        - type
        - file_search
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          enum:
            - file_search
          type: string
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
          x-ms-enum:
            name: RunStepDetailsToolCallsFileSearchObjectType
            modelAsString: true
            values:
              - value: file_search
        file_search:
          type: object
          description: 'For now, this is always going to be an empty object.'
    runStepDeltaStepDetailsToolCallsFileSearchObject:
      title: File search tool call
      required:
        - index
        - type
        - file_search
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          enum:
            - file_search
          type: string
          description: The type of tool call. This is always going to be `retrieval` for this type of tool call.
          x-ms-enum:
            name: RunStepDeltaStepDetailsToolCallsFileSearchObjectType
            modelAsString: true
            values:
              - value: file_search
        file_search:
          type: object
          description: 'For now, this is always going to be an empty object.'
    runStepDetailsToolCallsFunctionObject:
      title: Function tool call
      required:
        - id
        - type
        - function
      type: object
      properties:
        id:
          type: string
          description: The ID of the tool call object.
        type:
          enum:
            - function
          type: string
          description: The type of tool call. This is always going to be `function` for this type of tool call.
          x-ms-enum:
            name: RunStepDetailsToolCallsFunctionObjectType
            modelAsString: true
            values:
              - value: function
        function:
          required:
            - name
            - arguments
            - output
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              description: 'The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.'
              nullable: true
          description: The definition of the function that was called.
    runStepDeltaStepDetailsToolCallsFunctionObject:
      title: Function tool call
      required:
        - index
        - type
      type: object
      properties:
        index:
          type: integer
          description: The index of the tool call in the tool calls array.
        id:
          type: string
          description: The ID of the tool call object.
        type:
          enum:
            - function
          type: string
          description: The type of tool call. This is always going to be `function` for this type of tool call.
          x-ms-enum:
            name: RunStepDetailsToolCallsFunctionObjectType
            modelAsString: true
            values:
              - value: function
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments passed to the function.
            output:
              type: string
              description: The output of the function. This will be `null` if the outputs have not been submitted yet.
              nullable: true
          description: The definition of the function that was called.
    vectorStoreExpirationAfter:
      title: Vector store expiration policy
      required:
        - anchor
        - days
      type: object
      properties:
        anchor:
          enum:
            - last_active_at
          type: string
          description: 'Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.'
          x-ms-enum:
            name: VectorStoreExpirationAfterAnchor
            modelAsString: true
            values:
              - value: last_active_at
                description: The anchor timestamp after which the expiration policy applies.
        days:
          maximum: 365.0
          minimum: 1.0
          type: integer
          description: The number of days after the anchor time that the vector store will expire.
      description: The expiration policy for a vector store.
    vectorStoreObject:
      title: Vector store
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - status
        - last_active_at
        - name
        - bytes
        - file_counts
        - metadata
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - vector_store
          type: string
          description: 'The object type, which is always `vector_store`.'
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store was created.
        name:
          type: string
          description: The name of the vector store.
        usage_bytes:
          type: integer
          description: The total number of bytes used by the files in the vector store.
        file_counts:
          required:
            - in_progress
            - completed
            - failed
            - cancelled
            - total
          type: object
          properties:
            in_progress:
              type: integer
              description: The number of files that are currently being processed.
            completed:
              type: integer
              description: The number of files that have been successfully processed.
            failed:
              type: integer
              description: The number of files that have failed to process.
            cancelled:
              type: integer
              description: The number of files that were cancelled.
            total:
              type: integer
              description: The total number of files.
        status:
          enum:
            - expired
            - in_progress
            - completed
          type: string
          description: 'The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.'
          x-ms-enum:
            name: VectorStoreObjectStatus
            modelAsString: true
            values:
              - value: expired
              - value: in_progress
              - value: completed
        expires_after:
          $ref: '#/components/schemas/vectorStoreExpirationAfter'
        expires_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store will expire.
          nullable: true
        last_active_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store was last active.
          nullable: true
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      description: A vector store is a collection of processed files can be used by the `file_search` tool.
    createVectorStoreRequest:
      type: object
      properties:
        file_ids:
          maxItems: 500
          type: array
          items:
            type: string
          description: A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files.
        name:
          type: string
          description: The name of the vector store.
        expires_after:
          $ref: '#/components/schemas/vectorStoreExpirationAfter'
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    updateVectorStoreRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the vector store.
          nullable: true
        expires_after:
          $ref: '#/components/schemas/vectorStoreExpirationAfter'
        metadata:
          type: object
          description: "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
          nullable: true
      additionalProperties: false
    listVectorStoresResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/vectorStoreObject'
        first_id:
          type: string
          example: vs_abc123
        last_id:
          type: string
          example: vs_abc456
        has_more:
          type: boolean
          example: false
    deleteVectorStoreResponse:
      required:
        - id
        - object
        - deleted
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
            - vector_store.deleted
          type: string
          x-ms-enum:
            name: DeleteVectorStoreResponseObject
            modelAsString: true
            values:
              - value: vector_store.deleted
                description: The delete vector store response object state
    vectorStoreFileObject:
      title: Vector store files
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - last_error
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - vector_store.file
          type: string
          description: 'The object type, which is always `vector_store.file`.'
          x-ms-enum:
            name: VectorStoreFileObjectType
            modelAsString: true
            values:
              - value: vector_store.file
        usage_bytes:
          type: integer
          description: The total vector store usage in bytes. Note that this may be different from the original file size.
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store file was created.
        vector_store_id:
          type: string
          description: The ID of the vector store that the file is attached to.
        status:
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          type: string
          description: 'The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.'
          x-ms-enum:
            name: VectorStoreFileObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: completed
              - value: cancelled
              - value: failed
        last_error:
          required:
            - code
            - message
          type: object
          properties:
            code:
              enum:
                - internal_error
                - file_not_found
                - parsing_error
                - unhandled_mime_type
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              x-ms-enum:
                name: VectorStoreFileObjectLastErrorCode
                modelAsString: true
                values:
                  - value: internal_error
                  - value: file_not_found
                  - value: parsing_error
                  - value: unhandled_mime_type
            message:
              type: string
              description: A human-readable description of the error.
          description: The last error associated with this vector store file. Will be `null` if there are no errors.
          nullable: true
      description: A list of files attached to a vector store.
    createVectorStoreFileRequest:
      required:
        - file_id
      type: object
      properties:
        file_id:
          type: string
          description: A File ID that the vector store should use. Useful for tools like `file_search` that can access files.
      additionalProperties: false
    listVectorStoreFilesResponse:
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/vectorStoreFileObject'
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
    deleteVectorStoreFileResponse:
      required:
        - id
        - object
        - deleted
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          enum:
            - vector_store.file.deleted
          type: string
          x-ms-enum:
            name: DeleteVectorStoreFileResponseObject
            modelAsString: true
            values:
              - value: vector_store.file.deleted
    vectorStoreFileBatchObject:
      title: Vector store file batch
      required:
        - id
        - object
        - created_at
        - vector_store_id
        - status
        - file_counts
      type: object
      properties:
        id:
          type: string
          description: 'The identifier, which can be referenced in API endpoints.'
        object:
          enum:
            - vector_store.files_batch
          type: string
          description: 'The object type, which is always `vector_store.file_batch`.'
          x-ms-enum:
            name: VectorStoreFileBatchObjectType
            modelAsString: true
            values:
              - value: vector_store.files_batch
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the vector store files batch was created.
        vector_store_id:
          type: string
          description: The ID of the vector store that the File is attached to.
        status:
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          type: string
          description: 'The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.'
          x-ms-enum:
            name: VectorStoreFileBatchObjectStatus
            modelAsString: true
            values:
              - value: in_progress
              - value: completed
              - value: cancelled
              - value: failed
        file_counts:
          required:
            - in_progress
            - completed
            - cancelled
            - failed
            - total
          type: object
          properties:
            in_progress:
              type: integer
              description: The number of files that are currently being processed.
            completed:
              type: integer
              description: The number of files that have been processed.
            failed:
              type: integer
              description: The number of files that have failed to process.
            cancelled:
              type: integer
              description: The number of files that where cancelled.
            total:
              type: integer
              description: The total number of files.
      description: A batch of files attached to a vector store.
    createVectorStoreFileBatchRequest:
      required:
        - file_ids
      type: object
      properties:
        file_ids:
          maxItems: 500
          minItems: 1
          type: array
          items:
            type: string
          description: A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files.
      additionalProperties: false
    assistantStreamEvent:
      oneOf:
        - $ref: '#/components/schemas/threadStreamEvent'
        - $ref: '#/components/schemas/runStreamEvent'
        - $ref: '#/components/schemas/runStepStreamEvent'
        - $ref: '#/components/schemas/messageStreamEvent'
        - $ref: '#/components/schemas/errorEvent'
        - $ref: '#/components/schemas/doneEvent'
      description: "Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n"
    threadStreamEvent:
      oneOf:
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.created
              type: string
              x-ms-enum:
                name: ThreadStreamEventEnum
                modelAsString: true
                values:
                  - value: thread.created
                    description: The thread created event
            data:
              $ref: '#/components/schemas/threadObject'
          description: Occurs when a new thread is created.
    runStreamEvent:
      oneOf:
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.created
              type: string
              x-ms-enum:
                name: RunStreamEventCreated
                modelAsString: true
                values:
                  - value: thread.run.created
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a new run is created.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.queued
              type: string
              x-ms-enum:
                name: RunStreamEventQueued
                modelAsString: true
                values:
                  - value: thread.run.queued
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run moves to a `queued` status.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.in_progress
              type: string
              x-ms-enum:
                name: RunStreamEventInProgress
                modelAsString: true
                values:
                  - value: thread.run.in_progress
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run moves to an `in_progress` status.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.requires_action
              type: string
              x-ms-enum:
                name: RunStreamEventRequiresAction
                modelAsString: true
                values:
                  - value: thread.run.requires_action
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run moves to a `requires_action` status.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.completed
              type: string
              x-ms-enum:
                name: RunStreamEventCompleted
                modelAsString: true
                values:
                  - value: thread.run.completed
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run is completed.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.failed
              type: string
              x-ms-enum:
                name: RunStreamEventFailed
                modelAsString: true
                values:
                  - value: thread.run.failed
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run fails.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.cancelling
              type: string
              x-ms-enum:
                name: RunStreamEventCancelling
                modelAsString: true
                values:
                  - value: thread.run.cancelling
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run moves to a `cancelling` status.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.cancelled
              type: string
              x-ms-enum:
                name: RunStreamEventCancelled
                modelAsString: true
                values:
                  - value: thread.run.cancelled
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run is cancelled.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.expired
              type: string
              x-ms-enum:
                name: RunStreamEventExpired
                modelAsString: true
                values:
                  - value: thread.run.expired
            data:
              $ref: '#/components/schemas/runObject'
          description: Occurs when a run expires.
    runStepStreamEvent:
      oneOf:
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.created
              type: string
              x-ms-enum:
                name: RunStepStreamEventCreated
                modelAsString: true
                values:
                  - value: thread.run.step.created
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step is created.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.in_progress
              type: string
              x-ms-enum:
                name: RunStepStreamEventInProgress
                modelAsString: true
                values:
                  - value: thread.run.step.in_progress
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step moves to an `in_progress` state.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.delta
              type: string
              x-ms-enum:
                name: RunStepStreamEventDelta
                modelAsString: true
                values:
                  - value: thread.run.step.delta
            data:
              $ref: '#/components/schemas/runStepDeltaObject'
          description: Occurs when parts of a run step are being streamed.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.completed
              type: string
              x-ms-enum:
                name: RunStepStreamEventCompleted
                modelAsString: true
                values:
                  - value: thread.run.step.completed
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step is completed.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.failed
              type: string
              x-ms-enum:
                name: RunStepStreamEventFailed
                modelAsString: true
                values:
                  - value: thread.run.step.failed
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step fails.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.cancelled
              type: string
              x-ms-enum:
                name: RunStepStreamEventCancelled
                modelAsString: true
                values:
                  - value: thread.run.step.cancelled
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step is cancelled.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.run.step.expired
              type: string
              x-ms-enum:
                name: RunStepStreamEventExpired
                modelAsString: true
                values:
                  - value: thread.run.step.expired
            data:
              $ref: '#/components/schemas/runStepObject'
          description: Occurs when a run step expires.
    messageStreamEvent:
      oneOf:
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.message.created
              type: string
              x-ms-enum:
                name: MessageStreamEventCreated
                modelAsString: true
                values:
                  - value: thread.message.created
            data:
              $ref: '#/components/schemas/messageObject'
          description: Occurs when a message is created.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.message.in_progress
              type: string
              x-ms-enum:
                name: MessageStreamEventInProgress
                modelAsString: true
                values:
                  - value: thread.message.in_progress
            data:
              $ref: '#/components/schemas/messageObject'
          description: Occurs when a message moves to an `in_progress` state.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.message.delta
              type: string
              x-ms-enum:
                name: MessageStreamEventDelta
                modelAsString: true
                values:
                  - value: thread.message.delta
            data:
              $ref: '#/components/schemas/messageDeltaObject'
          description: Occurs when parts of a message are being streamed.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.message.completed
              type: string
              x-ms-enum:
                name: MessageStreamEventCompleted
                modelAsString: true
                values:
                  - value: thread.message.completed
            data:
              $ref: '#/components/schemas/messageObject'
          description: Occurs when a message is completed.
        - required:
            - event
            - data
          type: object
          properties:
            event:
              enum:
                - thread.message.incomplete
              type: string
              x-ms-enum:
                name: MessageStreamEventIncomplete
                modelAsString: true
                values:
                  - value: thread.message.incomplete
            data:
              $ref: '#/components/schemas/messageObject'
          description: Occurs when a message ends before it is completed.
    errorEvent:
      required:
        - event
        - data
      type: object
      properties:
        event:
          enum:
            - error
          type: string
          x-ms-enum:
            name: ErrorEventEnum
            modelAsString: true
            values:
              - value: error
        data:
          $ref: '#/components/schemas/error'
      description: Occurs when an error occurs. This can happen due to an internal server error or a timeout.
    doneEvent:
      required:
        - event
        - data
      type: object
      properties:
        event:
          enum:
            - done
          type: string
          x-ms-enum:
            name: DoneEventEnum
            modelAsString: true
            values:
              - value: done
        data:
          enum:
            - '[DONE]'
          type: string
          x-ms-enum:
            name: DoneEventDataEnum
            modelAsString: true
            values:
              - value: '[DONE]'
      description: Occurs when a stream ends.
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: api-key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]